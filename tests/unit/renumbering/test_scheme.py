"""
Edgecases not possible through SADEIs UI due to how the HMMER aligner is implemented, but should still be tested
if the scheme is used directly.
"""
from sadie.numbering.schemes import smooth_insertions, _number_regions


def test_smooth_insertions():
    """
    Explicit deletion states in the first position  where FW1 is adjusted with same or more N terminal del/insertions.
    """
    state_vector = [
        ((1, "d"), None),
        ((2, "m"), 0),
        ((3, "m"), 1),
        ((4, "m"), 2),
        ((5, "m"), 3),
        ((6, "m"), 4),
        ((7, "m"), 5),
        ((8, "m"), 6),
        ((9, "m"), 7),
        ((10, "m"), 8),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "i"), 16),
        ((18, "m"), 17),
        ((19, "m"), 18),
        ((20, "m"), 19),
        ((21, "m"), 20),
        ((22, "m"), 21),
        ((23, "m"), 22),
        ((24, "m"), 23),
        ((25, "m"), 24),
        ((26, "m"), 25),
        ((27, "m"), 26),
        ((28, "m"), 27),
        ((29, "m"), 28),
        ((30, "m"), 29),
        ((31, "m"), 30),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "d"), None),
        ((36, "m"), 31),
        ((37, "m"), 32),
        ((38, "m"), 33),
        ((39, "m"), 34),
        ((40, "m"), 35),
        ((41, "m"), 36),
        ((42, "m"), 37),
        ((43, "m"), 38),
        ((44, "m"), 39),
        ((45, "m"), 40),
        ((46, "m"), 41),
        ((47, "m"), 42),
        ((48, "m"), 43),
        ((49, "m"), 44),
        ((50, "m"), 45),
        ((51, "m"), 46),
        ((52, "m"), 47),
        ((53, "m"), 48),
        ((54, "m"), 49),
        ((55, "m"), 50),
        ((56, "m"), 51),
        ((57, "m"), 52),
        ((58, "m"), 53),
        ((59, "m"), 54),
        ((60, "m"), 55),
        ((61, "d"), None),
        ((62, "m"), 56),
        ((63, "m"), 57),
        ((64, "m"), 58),
        ((65, "m"), 59),
        ((66, "m"), 60),
        ((67, "m"), 61),
        ((68, "m"), 62),
        ((69, "m"), 63),
        ((70, "m"), 64),
        ((71, "m"), 65),
        ((72, "m"), 66),
        ((73, "m"), 67),
        ((74, "m"), 68),
        ((75, "m"), 69),
        ((76, "m"), 70),
        ((77, "m"), 71),
        ((78, "m"), 72),
        ((79, "m"), 73),
        ((80, "m"), 74),
        ((81, "m"), 75),
        ((82, "m"), 76),
        ((83, "m"), 77),
        ((84, "m"), 78),
        ((85, "m"), 79),
        ((86, "m"), 80),
        ((87, "m"), 81),
        ((88, "m"), 82),
        ((89, "m"), 83),
        ((90, "m"), 84),
        ((91, "m"), 85),
        ((92, "m"), 86),
        ((93, "m"), 87),
        ((94, "m"), 88),
        ((95, "m"), 89),
        ((96, "m"), 90),
        ((97, "m"), 91),
        ((98, "m"), 92),
        ((99, "m"), 93),
        ((100, "m"), 94),
        ((101, "m"), 95),
        ((102, "m"), 96),
        ((103, "m"), 97),
        ((104, "m"), 98),
        ((105, "m"), 99),
        ((106, "m"), 100),
        ((107, "m"), 101),
        ((108, "d"), None),
        ((109, "d"), None),
        ((110, "d"), None),
        ((111, "d"), None),
        ((112, "d"), None),
        ((113, "m"), 102),
        ((114, "m"), 103),
        ((115, "m"), 104),
        ((116, "m"), 105),
        ((117, "m"), 106),
        ((118, "m"), 107),
        ((119, "m"), 108),
        ((120, "m"), 109),
        ((121, "m"), 110),
        ((122, "m"), 111),
        ((123, "m"), 112),
        ((124, "m"), 113),
        ((125, "m"), 114),
        ((126, "m"), 115),
        ((127, "m"), 116),
        ((128, "m"), 117),
        ((129, "m"), 118),
    ]

    smoothed_state_vector = smooth_insertions(state_vector)

    correect_smoothed_state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "m"), 9),
        ((11, "m"), 10),
        ((12, "m"), 11),
        ((13, "m"), 12),
        ((14, "m"), 13),
        ((15, "m"), 14),
        ((16, "m"), 15),
        ((17, "m"), 16),
        ((18, "m"), 17),
        ((19, "m"), 18),
        ((20, "m"), 19),
        ((21, "m"), 20),
        ((22, "m"), 21),
        ((23, "m"), 22),
        ((24, "m"), 23),
        ((25, "m"), 24),
        ((26, "m"), 25),
        ((27, "m"), 26),
        ((28, "m"), 27),
        ((29, "m"), 28),
        ((30, "m"), 29),
        ((31, "m"), 30),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "d"), None),
        ((36, "m"), 31),
        ((37, "m"), 32),
        ((38, "m"), 33),
        ((39, "m"), 34),
        ((40, "m"), 35),
        ((41, "m"), 36),
        ((42, "m"), 37),
        ((43, "m"), 38),
        ((44, "m"), 39),
        ((45, "m"), 40),
        ((46, "m"), 41),
        ((47, "m"), 42),
        ((48, "m"), 43),
        ((49, "m"), 44),
        ((50, "m"), 45),
        ((51, "m"), 46),
        ((52, "m"), 47),
        ((53, "m"), 48),
        ((54, "m"), 49),
        ((55, "m"), 50),
        ((56, "m"), 51),
        ((57, "m"), 52),
        ((58, "m"), 53),
        ((59, "m"), 54),
        ((60, "m"), 55),
        ((61, "d"), None),
        ((62, "m"), 56),
        ((63, "m"), 57),
        ((64, "m"), 58),
        ((65, "m"), 59),
        ((66, "m"), 60),
        ((67, "m"), 61),
        ((68, "m"), 62),
        ((69, "m"), 63),
        ((70, "m"), 64),
        ((71, "m"), 65),
        ((72, "m"), 66),
        ((73, "m"), 67),
        ((74, "m"), 68),
        ((75, "m"), 69),
        ((76, "m"), 70),
        ((77, "m"), 71),
        ((78, "m"), 72),
        ((79, "m"), 73),
        ((80, "m"), 74),
        ((81, "m"), 75),
        ((82, "m"), 76),
        ((83, "m"), 77),
        ((84, "m"), 78),
        ((85, "m"), 79),
        ((86, "m"), 80),
        ((87, "m"), 81),
        ((88, "m"), 82),
        ((89, "m"), 83),
        ((90, "m"), 84),
        ((91, "m"), 85),
        ((92, "m"), 86),
        ((93, "m"), 87),
        ((94, "m"), 88),
        ((95, "m"), 89),
        ((96, "m"), 90),
        ((97, "m"), 91),
        ((98, "m"), 92),
        ((99, "m"), 93),
        ((100, "m"), 94),
        ((101, "m"), 95),
        ((102, "m"), 96),
        ((103, "m"), 97),
        ((104, "m"), 98),
        ((105, "m"), 99),
        ((106, "m"), 100),
        ((107, "m"), 101),
        ((108, "d"), None),
        ((109, "d"), None),
        ((110, "d"), None),
        ((111, "d"), None),
        ((112, "d"), None),
        ((113, "m"), 102),
        ((114, "m"), 103),
        ((115, "m"), 104),
        ((116, "m"), 105),
        ((117, "m"), 106),
        ((118, "m"), 107),
        ((119, "m"), 108),
        ((120, "m"), 109),
        ((121, "m"), 110),
        ((122, "m"), 111),
        ((123, "m"), 112),
        ((124, "m"), 113),
        ((125, "m"), 114),
        ((126, "m"), 115),
        ((127, "m"), 116),
        ((128, "m"), 117),
        ((129, "m"), 118),
    ]

    assert smoothed_state_vector == correect_smoothed_state_vector


def test_number_regions():
    """
    Adding a start_index when the start is only deletions and insertions
    """
    regions, start_index, end_index = _number_regions(
        sequence="QSQFLTSARSTLLQPSETLELTCARAGFSIAVANVSNLFWVKQPKGSKQEWMGTIKQKATGNEVASREKVVRSRYTIHRENAKKSAILQKSSLKSFDHPVAYCYAVTFDVIGDGVDITNADS",
        state_vector=[
            ((1, "d"), None),
            ((2, "i"), 0),
            ((2, "d"), None),
            ((3, "i"), 1),
            ((3, "m"), 2),
            ((4, "m"), 3),
            ((5, "m"), 4),
            ((6, "m"), 5),
            ((7, "m"), 6),
            ((8, "m"), 7),
            ((9, "m"), 8),
            ((10, "m"), 9),
            ((11, "m"), 10),
            ((12, "m"), 11),
            ((13, "m"), 12),
            ((14, "m"), 13),
            ((15, "m"), 14),
            ((16, "m"), 15),
            ((17, "m"), 16),
            ((18, "m"), 17),
            ((19, "m"), 18),
            ((20, "m"), 19),
            ((21, "m"), 20),
            ((22, "m"), 21),
            ((23, "m"), 22),
            ((24, "m"), 23),
            ((25, "m"), 24),
            ((26, "m"), 25),
            ((27, "m"), 26),
            ((28, "m"), 27),
            ((29, "m"), 28),
            ((30, "m"), 29),
            ((31, "d"), None),
            ((32, "m"), 30),
            ((33, "m"), 31),
            ((34, "m"), 32),
            ((35, "m"), 33),
            ((36, "m"), 34),
            ((37, "m"), 35),
            ((38, "m"), 36),
            ((39, "m"), 37),
            ((40, "m"), 38),
            ((41, "m"), 39),
            ((42, "m"), 40),
            ((43, "m"), 41),
            ((44, "m"), 42),
            ((45, "m"), 43),
            ((46, "m"), 44),
            ((47, "m"), 45),
            ((48, "m"), 46),
            ((49, "m"), 47),
            ((50, "m"), 48),
            ((51, "m"), 49),
            ((52, "m"), 50),
            ((53, "m"), 51),
            ((54, "m"), 52),
            ((55, "m"), 53),
            ((56, "m"), 54),
            ((57, "m"), 55),
            ((58, "m"), 56),
            ((59, "m"), 57),
            ((60, "m"), 58),
            ((61, "m"), 59),
            ((62, "m"), 60),
            ((63, "m"), 61),
            ((64, "m"), 62),
            ((65, "m"), 63),
            ((66, "m"), 64),
            ((67, "m"), 65),
            ((68, "m"), 66),
            ((69, "m"), 67),
            ((70, "m"), 68),
            ((71, "m"), 69),
            ((72, "m"), 70),
            ((73, "m"), 71),
            ((74, "m"), 72),
            ((75, "m"), 73),
            ((76, "m"), 74),
            ((77, "m"), 75),
            ((78, "m"), 76),
            ((79, "m"), 77),
            ((80, "m"), 78),
            ((81, "m"), 79),
            ((82, "m"), 80),
            ((83, "m"), 81),
            ((84, "m"), 82),
            ((85, "m"), 83),
            ((86, "m"), 84),
            ((87, "m"), 85),
            ((88, "m"), 86),
            ((89, "m"), 87),
            ((90, "m"), 88),
            ((91, "m"), 89),
            ((92, "m"), 90),
            ((93, "m"), 91),
            ((94, "m"), 92),
            ((95, "m"), 93),
            ((96, "m"), 94),
            ((97, "m"), 95),
            ((98, "m"), 96),
            ((99, "m"), 97),
            ((100, "m"), 98),
            ((101, "m"), 99),
            ((102, "m"), 100),
            ((103, "m"), 101),
            ((104, "m"), 102),
            ((105, "m"), 103),
            ((106, "m"), 104),
            ((107, "d"), None),
            ((108, "d"), None),
            ((109, "d"), None),
            ((110, "d"), None),
            ((111, "d"), None),
            ((112, "d"), None),
            ((113, "m"), 105),
            ((114, "m"), 106),
            ((115, "m"), 107),
            ((116, "m"), 108),
            ((117, "m"), 109),
            ((118, "m"), 110),
            ((119, "m"), 111),
            ((120, "m"), 112),
            ((121, "m"), 113),
            ((122, "m"), 114),
            ((123, "m"), 115),
            ((124, "m"), 116),
            ((125, "m"), 117),
            ((126, "m"), 118),
            ((127, "m"), 119),
            ((128, "m"), 120),
        ],
        state_string="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        region_string="11111111111111111111111111222222222222333333333333333334444444444555555555555555555555555555555555555555666666666666677777777777",
        region_index_dict={"1": 0, "2": 1, "3": 2, "4": 3, "5": 4, "6": 5, "7": 6},  # offset
        rels={0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0},  # no differences
        n_regions=7,  # all 7 regions are present in the state vector
        exclude_deletions=[1, 3, 5],
    )
    assert regions == [
        [
            ((1, "A"), "Q"),
            ((2, "A"), "S"),
            ((3, " "), "Q"),
            ((4, " "), "F"),
            ((5, " "), "L"),
            ((6, " "), "T"),
            ((7, " "), "S"),
            ((8, " "), "A"),
            ((9, " "), "R"),
            ((10, " "), "S"),
            ((11, " "), "T"),
            ((12, " "), "L"),
            ((13, " "), "L"),
            ((14, " "), "Q"),
            ((15, " "), "P"),
            ((16, " "), "S"),
            ((17, " "), "E"),
            ((18, " "), "T"),
            ((19, " "), "L"),
            ((20, " "), "E"),
            ((21, " "), "L"),
            ((22, " "), "T"),
            ((23, " "), "C"),
            ((24, " "), "A"),
            ((25, " "), "R"),
            ((26, " "), "A"),
        ],
        [
            ((27, " "), "G"),
            ((28, " "), "F"),
            ((29, " "), "S"),
            ((30, " "), "I"),
            ((32, " "), "A"),
            ((33, " "), "V"),
            ((34, " "), "A"),
            ((35, " "), "N"),
            ((36, " "), "V"),
            ((37, " "), "S"),
            ((38, " "), "N"),
        ],
        [
            ((39, " "), "L"),
            ((40, " "), "F"),
            ((41, " "), "W"),
            ((42, " "), "V"),
            ((43, " "), "K"),
            ((44, " "), "Q"),
            ((45, " "), "P"),
            ((46, " "), "K"),
            ((47, " "), "G"),
            ((48, " "), "S"),
            ((49, " "), "K"),
            ((50, " "), "Q"),
            ((51, " "), "E"),
            ((52, " "), "W"),
            ((53, " "), "M"),
            ((54, " "), "G"),
            ((55, " "), "T"),
        ],
        [
            ((56, " "), "I"),
            ((57, " "), "K"),
            ((58, " "), "Q"),
            ((59, " "), "K"),
            ((60, " "), "A"),
            ((61, " "), "T"),
            ((62, " "), "G"),
            ((63, " "), "N"),
            ((64, " "), "E"),
            ((65, " "), "V"),
        ],
        [
            ((66, " "), "A"),
            ((67, " "), "S"),
            ((68, " "), "R"),
            ((69, " "), "E"),
            ((70, " "), "K"),
            ((71, " "), "V"),
            ((72, " "), "V"),
            ((73, " "), "R"),
            ((74, " "), "S"),
            ((75, " "), "R"),
            ((76, " "), "Y"),
            ((77, " "), "T"),
            ((78, " "), "I"),
            ((79, " "), "H"),
            ((80, " "), "R"),
            ((81, " "), "E"),
            ((82, " "), "N"),
            ((83, " "), "A"),
            ((84, " "), "K"),
            ((85, " "), "K"),
            ((86, " "), "S"),
            ((87, " "), "A"),
            ((88, " "), "I"),
            ((89, " "), "L"),
            ((90, " "), "Q"),
            ((91, " "), "K"),
            ((92, " "), "S"),
            ((93, " "), "S"),
            ((94, " "), "L"),
            ((95, " "), "K"),
            ((96, " "), "S"),
            ((97, " "), "F"),
            ((98, " "), "D"),
            ((99, " "), "H"),
            ((100, " "), "P"),
            ((101, " "), "V"),
            ((102, " "), "A"),
            ((103, " "), "Y"),
            ((104, " "), "C"),
        ],
        [
            ((105, " "), "Y"),
            ((106, " "), "A"),
            ((113, " "), "V"),
            ((114, " "), "T"),
            ((115, " "), "F"),
            ((116, " "), "D"),
            ((117, " "), "V"),
        ],
        [
            ((118, " "), "I"),
            ((119, " "), "G"),
            ((120, " "), "D"),
            ((121, " "), "G"),
            ((122, " "), "V"),
            ((123, " "), "D"),
            ((124, " "), "I"),
            ((125, " "), "T"),
            ((126, " "), "N"),
            ((127, " "), "A"),
            ((128, " "), "D"),
        ],
    ]
    assert start_index == 0
    assert end_index == 120
