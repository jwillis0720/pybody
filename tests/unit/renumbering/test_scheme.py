"""
Edgecases not possible through SADEIs UI due to how the HMMER aligner is implemented, but should still be tested
if the scheme is used directly.
"""
import pytest

from sadie.numbering.schemes import (
    _number_regions,
    get_cdr3_annotations,
    get_imgt_cdr,
    number_chothia_heavy,
    number_chothia_light,
    number_imgt,
    number_kabat_heavy,
    number_kabat_light,
    smooth_insertions,
)
from sadie.utility.exception import LongHCDR3Error


def test_smooth_insertions():
    """
    Explicit deletion states in the first position  where FW1 is adjusted with same or more N terminal del/insertions.
    """
    state_vector = [
        ((1, "d"), None),
        ((2, "m"), 0),
        ((3, "m"), 1),
        ((4, "m"), 2),
        ((5, "m"), 3),
        ((6, "m"), 4),
        ((7, "m"), 5),
        ((8, "m"), 6),
        ((9, "m"), 7),
        ((10, "m"), 8),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "i"), 16),
        ((18, "m"), 17),
        ((19, "m"), 18),
        ((20, "m"), 19),
        ((21, "m"), 20),
        ((22, "m"), 21),
        ((23, "m"), 22),
        ((24, "m"), 23),
        ((25, "m"), 24),
        ((26, "m"), 25),
        ((27, "m"), 26),
        ((28, "m"), 27),
        ((29, "m"), 28),
        ((30, "m"), 29),
        ((31, "m"), 30),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "d"), None),
        ((36, "m"), 31),
        ((37, "m"), 32),
        ((38, "m"), 33),
        ((39, "m"), 34),
        ((40, "m"), 35),
        ((41, "m"), 36),
        ((42, "m"), 37),
        ((43, "m"), 38),
        ((44, "m"), 39),
        ((45, "m"), 40),
        ((46, "m"), 41),
        ((47, "m"), 42),
        ((48, "m"), 43),
        ((49, "m"), 44),
        ((50, "m"), 45),
        ((51, "m"), 46),
        ((52, "m"), 47),
        ((53, "m"), 48),
        ((54, "m"), 49),
        ((55, "m"), 50),
        ((56, "m"), 51),
        ((57, "m"), 52),
        ((58, "m"), 53),
        ((59, "m"), 54),
        ((60, "m"), 55),
        ((61, "d"), None),
        ((62, "m"), 56),
        ((63, "m"), 57),
        ((64, "m"), 58),
        ((65, "m"), 59),
        ((66, "m"), 60),
        ((67, "m"), 61),
        ((68, "m"), 62),
        ((69, "m"), 63),
        ((70, "m"), 64),
        ((71, "m"), 65),
        ((72, "m"), 66),
        ((73, "m"), 67),
        ((74, "m"), 68),
        ((75, "m"), 69),
        ((76, "m"), 70),
        ((77, "m"), 71),
        ((78, "m"), 72),
        ((79, "m"), 73),
        ((80, "m"), 74),
        ((81, "m"), 75),
        ((82, "m"), 76),
        ((83, "m"), 77),
        ((84, "m"), 78),
        ((85, "m"), 79),
        ((86, "m"), 80),
        ((87, "m"), 81),
        ((88, "m"), 82),
        ((89, "m"), 83),
        ((90, "m"), 84),
        ((91, "m"), 85),
        ((92, "m"), 86),
        ((93, "m"), 87),
        ((94, "m"), 88),
        ((95, "m"), 89),
        ((96, "m"), 90),
        ((97, "m"), 91),
        ((98, "m"), 92),
        ((99, "m"), 93),
        ((100, "m"), 94),
        ((101, "m"), 95),
        ((102, "m"), 96),
        ((103, "m"), 97),
        ((104, "m"), 98),
        ((105, "m"), 99),
        ((106, "m"), 100),
        ((107, "m"), 101),
        ((108, "d"), None),
        ((109, "d"), None),
        ((110, "d"), None),
        ((111, "d"), None),
        ((112, "d"), None),
        ((113, "m"), 102),
        ((114, "m"), 103),
        ((115, "m"), 104),
        ((116, "m"), 105),
        ((117, "m"), 106),
        ((118, "m"), 107),
        ((119, "m"), 108),
        ((120, "m"), 109),
        ((121, "m"), 110),
        ((122, "m"), 111),
        ((123, "m"), 112),
        ((124, "m"), 113),
        ((125, "m"), 114),
        ((126, "m"), 115),
        ((127, "m"), 116),
        ((128, "m"), 117),
        ((129, "m"), 118),
    ]

    smoothed_state_vector = smooth_insertions(state_vector)

    correect_smoothed_state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "m"), 9),
        ((11, "m"), 10),
        ((12, "m"), 11),
        ((13, "m"), 12),
        ((14, "m"), 13),
        ((15, "m"), 14),
        ((16, "m"), 15),
        ((17, "m"), 16),
        ((18, "m"), 17),
        ((19, "m"), 18),
        ((20, "m"), 19),
        ((21, "m"), 20),
        ((22, "m"), 21),
        ((23, "m"), 22),
        ((24, "m"), 23),
        ((25, "m"), 24),
        ((26, "m"), 25),
        ((27, "m"), 26),
        ((28, "m"), 27),
        ((29, "m"), 28),
        ((30, "m"), 29),
        ((31, "m"), 30),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "d"), None),
        ((36, "m"), 31),
        ((37, "m"), 32),
        ((38, "m"), 33),
        ((39, "m"), 34),
        ((40, "m"), 35),
        ((41, "m"), 36),
        ((42, "m"), 37),
        ((43, "m"), 38),
        ((44, "m"), 39),
        ((45, "m"), 40),
        ((46, "m"), 41),
        ((47, "m"), 42),
        ((48, "m"), 43),
        ((49, "m"), 44),
        ((50, "m"), 45),
        ((51, "m"), 46),
        ((52, "m"), 47),
        ((53, "m"), 48),
        ((54, "m"), 49),
        ((55, "m"), 50),
        ((56, "m"), 51),
        ((57, "m"), 52),
        ((58, "m"), 53),
        ((59, "m"), 54),
        ((60, "m"), 55),
        ((61, "d"), None),
        ((62, "m"), 56),
        ((63, "m"), 57),
        ((64, "m"), 58),
        ((65, "m"), 59),
        ((66, "m"), 60),
        ((67, "m"), 61),
        ((68, "m"), 62),
        ((69, "m"), 63),
        ((70, "m"), 64),
        ((71, "m"), 65),
        ((72, "m"), 66),
        ((73, "m"), 67),
        ((74, "m"), 68),
        ((75, "m"), 69),
        ((76, "m"), 70),
        ((77, "m"), 71),
        ((78, "m"), 72),
        ((79, "m"), 73),
        ((80, "m"), 74),
        ((81, "m"), 75),
        ((82, "m"), 76),
        ((83, "m"), 77),
        ((84, "m"), 78),
        ((85, "m"), 79),
        ((86, "m"), 80),
        ((87, "m"), 81),
        ((88, "m"), 82),
        ((89, "m"), 83),
        ((90, "m"), 84),
        ((91, "m"), 85),
        ((92, "m"), 86),
        ((93, "m"), 87),
        ((94, "m"), 88),
        ((95, "m"), 89),
        ((96, "m"), 90),
        ((97, "m"), 91),
        ((98, "m"), 92),
        ((99, "m"), 93),
        ((100, "m"), 94),
        ((101, "m"), 95),
        ((102, "m"), 96),
        ((103, "m"), 97),
        ((104, "m"), 98),
        ((105, "m"), 99),
        ((106, "m"), 100),
        ((107, "m"), 101),
        ((108, "d"), None),
        ((109, "d"), None),
        ((110, "d"), None),
        ((111, "d"), None),
        ((112, "d"), None),
        ((113, "m"), 102),
        ((114, "m"), 103),
        ((115, "m"), 104),
        ((116, "m"), 105),
        ((117, "m"), 106),
        ((118, "m"), 107),
        ((119, "m"), 108),
        ((120, "m"), 109),
        ((121, "m"), 110),
        ((122, "m"), 111),
        ((123, "m"), 112),
        ((124, "m"), 113),
        ((125, "m"), 114),
        ((126, "m"), 115),
        ((127, "m"), 116),
        ((128, "m"), 117),
        ((129, "m"), 118),
    ]

    assert smoothed_state_vector == correect_smoothed_state_vector


def test_number_regions():
    """
    Adding a start_index when the start is only deletions and insertions
    """
    regions, start_index, end_index = _number_regions(
        sequence="QSQFLTSARSTLLQPSETLELTCARAGFSIAVANVSNLFWVKQPKGSKQEWMGTIKQKATGNEVASREKVVRSRYTIHRENAKKSAILQKSSLKSFDHPVAYCYAVTFDVIGDGVDITNADS",
        state_vector=[
            ((1, "d"), None),
            ((2, "i"), 0),
            ((2, "d"), None),
            ((3, "i"), 1),
            ((3, "m"), 2),
            ((4, "m"), 3),
            ((5, "m"), 4),
            ((6, "m"), 5),
            ((7, "m"), 6),
            ((8, "m"), 7),
            ((9, "m"), 8),
            ((10, "m"), 9),
            ((11, "m"), 10),
            ((12, "m"), 11),
            ((13, "m"), 12),
            ((14, "m"), 13),
            ((15, "m"), 14),
            ((16, "m"), 15),
            ((17, "m"), 16),
            ((18, "m"), 17),
            ((19, "m"), 18),
            ((20, "m"), 19),
            ((21, "m"), 20),
            ((22, "m"), 21),
            ((23, "m"), 22),
            ((24, "m"), 23),
            ((25, "m"), 24),
            ((26, "m"), 25),
            ((27, "m"), 26),
            ((28, "m"), 27),
            ((29, "m"), 28),
            ((30, "m"), 29),
            ((31, "d"), None),
            ((32, "m"), 30),
            ((33, "m"), 31),
            ((34, "m"), 32),
            ((35, "m"), 33),
            ((36, "m"), 34),
            ((37, "m"), 35),
            ((38, "m"), 36),
            ((39, "m"), 37),
            ((40, "m"), 38),
            ((41, "m"), 39),
            ((42, "m"), 40),
            ((43, "m"), 41),
            ((44, "m"), 42),
            ((45, "m"), 43),
            ((46, "m"), 44),
            ((47, "m"), 45),
            ((48, "m"), 46),
            ((49, "m"), 47),
            ((50, "m"), 48),
            ((51, "m"), 49),
            ((52, "m"), 50),
            ((53, "m"), 51),
            ((54, "m"), 52),
            ((55, "m"), 53),
            ((56, "m"), 54),
            ((57, "m"), 55),
            ((58, "m"), 56),
            ((59, "m"), 57),
            ((60, "m"), 58),
            ((61, "m"), 59),
            ((62, "m"), 60),
            ((63, "m"), 61),
            ((64, "m"), 62),
            ((65, "m"), 63),
            ((66, "m"), 64),
            ((67, "m"), 65),
            ((68, "m"), 66),
            ((69, "m"), 67),
            ((70, "m"), 68),
            ((71, "m"), 69),
            ((72, "m"), 70),
            ((73, "m"), 71),
            ((74, "m"), 72),
            ((75, "m"), 73),
            ((76, "m"), 74),
            ((77, "m"), 75),
            ((78, "m"), 76),
            ((79, "m"), 77),
            ((80, "m"), 78),
            ((81, "m"), 79),
            ((82, "m"), 80),
            ((83, "m"), 81),
            ((84, "m"), 82),
            ((85, "m"), 83),
            ((86, "m"), 84),
            ((87, "m"), 85),
            ((88, "m"), 86),
            ((89, "m"), 87),
            ((90, "m"), 88),
            ((91, "m"), 89),
            ((92, "m"), 90),
            ((93, "m"), 91),
            ((94, "m"), 92),
            ((95, "m"), 93),
            ((96, "m"), 94),
            ((97, "m"), 95),
            ((98, "m"), 96),
            ((99, "m"), 97),
            ((100, "m"), 98),
            ((101, "m"), 99),
            ((102, "m"), 100),
            ((103, "m"), 101),
            ((104, "m"), 102),
            ((105, "m"), 103),
            ((106, "m"), 104),
            ((107, "d"), None),
            ((108, "d"), None),
            ((109, "d"), None),
            ((110, "d"), None),
            ((111, "d"), None),
            ((112, "d"), None),
            ((113, "m"), 105),
            ((114, "m"), 106),
            ((115, "m"), 107),
            ((116, "m"), 108),
            ((117, "m"), 109),
            ((118, "m"), 110),
            ((119, "m"), 111),
            ((120, "m"), 112),
            ((121, "m"), 113),
            ((122, "m"), 114),
            ((123, "m"), 115),
            ((124, "m"), 116),
            ((125, "m"), 117),
            ((126, "m"), 118),
            ((127, "m"), 119),
            ((128, "m"), 120),
        ],
        state_string="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        region_string="11111111111111111111111111222222222222333333333333333334444444444555555555555555555555555555555555555555666666666666677777777777",
        region_index_dict={"1": 0, "2": 1, "3": 2, "4": 3, "5": 4, "6": 5, "7": 6},  # offset
        rels={0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0},  # no differences
        n_regions=7,  # all 7 regions are present in the state vector
        exclude_deletions=[1, 3, 5],
    )
    assert regions == [
        [
            ((1, "A"), "Q"),
            ((2, "A"), "S"),
            ((3, " "), "Q"),
            ((4, " "), "F"),
            ((5, " "), "L"),
            ((6, " "), "T"),
            ((7, " "), "S"),
            ((8, " "), "A"),
            ((9, " "), "R"),
            ((10, " "), "S"),
            ((11, " "), "T"),
            ((12, " "), "L"),
            ((13, " "), "L"),
            ((14, " "), "Q"),
            ((15, " "), "P"),
            ((16, " "), "S"),
            ((17, " "), "E"),
            ((18, " "), "T"),
            ((19, " "), "L"),
            ((20, " "), "E"),
            ((21, " "), "L"),
            ((22, " "), "T"),
            ((23, " "), "C"),
            ((24, " "), "A"),
            ((25, " "), "R"),
            ((26, " "), "A"),
        ],
        [
            ((27, " "), "G"),
            ((28, " "), "F"),
            ((29, " "), "S"),
            ((30, " "), "I"),
            ((32, " "), "A"),
            ((33, " "), "V"),
            ((34, " "), "A"),
            ((35, " "), "N"),
            ((36, " "), "V"),
            ((37, " "), "S"),
            ((38, " "), "N"),
        ],
        [
            ((39, " "), "L"),
            ((40, " "), "F"),
            ((41, " "), "W"),
            ((42, " "), "V"),
            ((43, " "), "K"),
            ((44, " "), "Q"),
            ((45, " "), "P"),
            ((46, " "), "K"),
            ((47, " "), "G"),
            ((48, " "), "S"),
            ((49, " "), "K"),
            ((50, " "), "Q"),
            ((51, " "), "E"),
            ((52, " "), "W"),
            ((53, " "), "M"),
            ((54, " "), "G"),
            ((55, " "), "T"),
        ],
        [
            ((56, " "), "I"),
            ((57, " "), "K"),
            ((58, " "), "Q"),
            ((59, " "), "K"),
            ((60, " "), "A"),
            ((61, " "), "T"),
            ((62, " "), "G"),
            ((63, " "), "N"),
            ((64, " "), "E"),
            ((65, " "), "V"),
        ],
        [
            ((66, " "), "A"),
            ((67, " "), "S"),
            ((68, " "), "R"),
            ((69, " "), "E"),
            ((70, " "), "K"),
            ((71, " "), "V"),
            ((72, " "), "V"),
            ((73, " "), "R"),
            ((74, " "), "S"),
            ((75, " "), "R"),
            ((76, " "), "Y"),
            ((77, " "), "T"),
            ((78, " "), "I"),
            ((79, " "), "H"),
            ((80, " "), "R"),
            ((81, " "), "E"),
            ((82, " "), "N"),
            ((83, " "), "A"),
            ((84, " "), "K"),
            ((85, " "), "K"),
            ((86, " "), "S"),
            ((87, " "), "A"),
            ((88, " "), "I"),
            ((89, " "), "L"),
            ((90, " "), "Q"),
            ((91, " "), "K"),
            ((92, " "), "S"),
            ((93, " "), "S"),
            ((94, " "), "L"),
            ((95, " "), "K"),
            ((96, " "), "S"),
            ((97, " "), "F"),
            ((98, " "), "D"),
            ((99, " "), "H"),
            ((100, " "), "P"),
            ((101, " "), "V"),
            ((102, " "), "A"),
            ((103, " "), "Y"),
            ((104, " "), "C"),
        ],
        [
            ((105, " "), "Y"),
            ((106, " "), "A"),
            ((113, " "), "V"),
            ((114, " "), "T"),
            ((115, " "), "F"),
            ((116, " "), "D"),
            ((117, " "), "V"),
        ],
        [
            ((118, " "), "I"),
            ((119, " "), "G"),
            ((120, " "), "D"),
            ((121, " "), "G"),
            ((122, " "), "V"),
            ((123, " "), "D"),
            ((124, " "), "I"),
            ((125, " "), "T"),
            ((126, " "), "N"),
            ((127, " "), "A"),
            ((128, " "), "D"),
        ],
    ]
    assert start_index == 0
    assert end_index == 120


def test_imgt_cdr():
    """
    Test imgt cdr annotations when cdrs are either length 0 or 1
    """
    annotations = get_imgt_cdr(0, 12, None, None)
    assert annotations == [None, None, None, None, None, None, None, None, None, None, None, None]
    annotations = get_imgt_cdr(1, 12, None, None)
    assert annotations == [(None, " "), None, None, None, None, None, None, None, None, None, None, None]


def test_number_imgt():
    """
    cdr3 length longer than 117 check
    """
    cdr1 = "GYRFSFYH"
    sequence = f"QGQLVQSGGELKKPGASVKISCKTS{cdr1}INWIRQLVGRGPEWMGWISPYNGGTNLAPELRGRLVLTTEREVVDTMTLSTGTAHMELRNLRSDDTGIYFCAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLWGQGTLLTVSS"
    state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "d"), None),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "m"), 16),
        ((19, "m"), 17),
        ((20, "m"), 18),
        ((21, "m"), 19),
        ((22, "m"), 20),
        ((23, "m"), 21),
        ((24, "m"), 22),
        ((25, "m"), 23),
        ((26, "m"), 24),
        ((27, "m"), 25),
        ((28, "m"), 26),
        ((29, "m"), 27),
        ((30, "m"), 28),
        ((31, "d"), None),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "m"), 29),
        ((36, "m"), 30),
        ((37, "m"), 31),
        ((38, "m"), 32),
        ((39, "m"), 33),
        ((40, "m"), 34),
        ((41, "m"), 35),
        ((42, "m"), 36),
        ((43, "m"), 37),
        ((44, "m"), 38),
        ((45, "m"), 39),
        ((46, "m"), 40),
        ((47, "m"), 41),
        ((48, "m"), 42),
        ((49, "m"), 43),
        ((50, "m"), 44),
        ((51, "m"), 45),
        ((52, "m"), 46),
        ((53, "m"), 47),
        ((54, "m"), 48),
        ((55, "m"), 49),
        ((56, "m"), 50),
        ((57, "m"), 51),
        ((58, "m"), 52),
        ((59, "m"), 53),
        ((60, "d"), None),
        ((61, "d"), None),
        ((62, "m"), 54),
        ((63, "m"), 55),
        ((64, "m"), 56),
        ((65, "m"), 57),
        ((66, "m"), 58),
        ((67, "m"), 59),
        ((68, "m"), 60),
        ((69, "m"), 61),
        ((70, "m"), 62),
        ((71, "m"), 63),
        ((72, "m"), 64),
        ((73, "d"), None),
        ((74, "m"), 65),
        ((75, "m"), 66),
        ((76, "m"), 67),
        ((77, "m"), 68),
        ((78, "m"), 69),
        ((79, "m"), 70),
        ((80, "m"), 71),
        ((81, "m"), 72),
        ((82, "m"), 73),
        ((83, "i"), 74),
        ((83, "i"), 75),
        ((83, "i"), 76),
        ((83, "i"), 77),
        ((83, "i"), 78),
        ((83, "i"), 79),
        ((83, "i"), 80),
        ((83, "i"), 81),
        ((83, "m"), 82),
        ((84, "m"), 83),
        ((85, "m"), 84),
        ((86, "m"), 85),
        ((87, "m"), 86),
        ((88, "m"), 87),
        ((89, "m"), 88),
        ((90, "m"), 89),
        ((91, "m"), 90),
        ((92, "m"), 91),
        ((93, "m"), 92),
        ((94, "m"), 93),
        ((95, "m"), 94),
        ((96, "m"), 95),
        ((97, "m"), 96),
        ((98, "m"), 97),
        ((99, "m"), 98),
        ((100, "m"), 99),
        ((101, "m"), 100),
        ((102, "m"), 101),
        ((103, "m"), 102),
        ((104, "m"), 103),
        ((105, "m"), 104),
        ((106, "m"), 105),
        ((107, "m"), 106),
        ((108, "m"), 107),
        ((109, "m"), 108),
        ((110, "m"), 109),
        ((111, "m"), 110),
        ((112, "m"), 111),
        ((113, "m"), 112),
        ((114, "m"), 113),
        ((115, "m"), 114),
        ((116, "i"), 115),
        ((116, "i"), 116),
        ((116, "i"), 117),
        ((116, "i"), 118),
        ((116, "i"), 119),
        ((116, "i"), 120),
        ((116, "i"), 121),
        ((116, "i"), 122),
        ((116, "i"), 123),
        ((116, "i"), 124),
        ((116, "i"), 125),
        ((116, "i"), 126),
        ((116, "i"), 127),
        ((116, "i"), 128),
        ((116, "i"), 129),
        ((116, "i"), 130),
        ((116, "i"), 131),
        ((116, "i"), 132),
        ((116, "i"), 133),
        ((116, "i"), 134),
        ((116, "i"), 135),
        ((116, "i"), 136),
        ((116, "i"), 137),
        ((116, "i"), 138),
        ((116, "i"), 139),
        ((116, "i"), 140),
        ((116, "i"), 141),
        ((116, "i"), 142),
        ((116, "i"), 143),
        ((116, "i"), 144),
        ((116, "i"), 145),
        ((116, "i"), 146),
        ((116, "i"), 147),
        ((116, "i"), 148),
        ((116, "i"), 149),
        ((116, "i"), 150),
        ((116, "i"), 151),
        ((116, "i"), 152),
        ((116, "i"), 153),
        ((116, "i"), 154),
        ((116, "i"), 155),
        ((116, "i"), 156),
        ((116, "i"), 157),
        ((116, "i"), 158),
        ((116, "i"), 159),
        ((116, "i"), 160),
        ((116, "i"), 161),
        ((116, "i"), 162),
        ((116, "i"), 163),
        ((116, "i"), 164),
        ((116, "i"), 165),
        ((116, "i"), 166),
        ((116, "i"), 167),
        ((116, "i"), 168),
        ((116, "i"), 169),
        ((116, "i"), 170),
        ((116, "i"), 171),
        ((116, "i"), 172),
        ((116, "i"), 173),
        ((116, "i"), 174),
        ((116, "i"), 175),
        ((116, "i"), 176),
        ((116, "i"), 177),
        ((116, "i"), 178),
        ((116, "i"), 179),
        ((116, "i"), 180),
        ((116, "i"), 181),
        ((116, "i"), 182),
        ((116, "i"), 183),
        ((116, "i"), 184),
        ((116, "i"), 185),
        ((116, "i"), 186),
        ((116, "i"), 187),
        ((116, "i"), 188),
        ((116, "i"), 189),
        ((116, "i"), 190),
        ((116, "i"), 191),
        ((116, "i"), 192),
        ((116, "i"), 193),
        ((116, "i"), 194),
        ((116, "i"), 195),
        ((116, "i"), 196),
        ((116, "i"), 197),
        ((116, "i"), 198),
        ((116, "i"), 199),
        ((116, "i"), 200),
        ((116, "i"), 201),
        ((116, "i"), 202),
        ((116, "i"), 203),
        ((116, "i"), 204),
        ((116, "i"), 205),
        ((116, "i"), 206),
        ((116, "i"), 207),
        ((116, "i"), 208),
        ((116, "i"), 209),
        ((116, "i"), 210),
        ((116, "i"), 211),
        ((116, "i"), 212),
        ((116, "i"), 213),
        ((116, "i"), 214),
        ((116, "i"), 215),
        ((116, "i"), 216),
        ((116, "i"), 217),
        ((116, "i"), 218),
        ((116, "i"), 219),
        ((116, "i"), 220),
        ((116, "i"), 221),
        ((116, "i"), 222),
        ((116, "i"), 223),
        ((116, "i"), 224),
        ((116, "i"), 225),
        ((116, "i"), 226),
        ((116, "i"), 227),
        ((116, "i"), 228),
        ((116, "i"), 229),
        ((116, "i"), 230),
        ((117, "m"), 231),
        ((118, "m"), 232),
        ((119, "m"), 233),
        ((120, "m"), 234),
        ((121, "m"), 235),
        ((122, "m"), 236),
        ((123, "m"), 237),
        ((124, "m"), 238),
        ((125, "m"), 239),
        ((126, "m"), 240),
        ((127, "m"), 241),
        ((128, "m"), 242),
    ]
    with pytest.raises(LongHCDR3Error):
        number_imgt(state_vector, sequence)


def test_number_chothia_heavy():
    """
    Number chothia heavy testing. CDR3 over length 72
    """
    sequence = "QGQLVQSGGELKKPGASVKISCKTSGYRFSFYHINWIRQLVGRGPEWMGWISPYNGGTNLAPELRGRLVLTTEREVVDTMTLSTGTAHMELRNLRSDDTGIYFCAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLWGQGTLLTVSS"
    state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "d"), None),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "m"), 16),
        ((19, "m"), 17),
        ((20, "m"), 18),
        ((21, "m"), 19),
        ((22, "m"), 20),
        ((23, "m"), 21),
        ((24, "m"), 22),
        ((25, "m"), 23),
        ((26, "m"), 24),
        ((27, "m"), 25),
        ((28, "m"), 26),
        ((29, "m"), 27),
        ((30, "m"), 28),
        ((31, "d"), None),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "m"), 29),
        ((36, "m"), 30),
        ((37, "m"), 31),
        ((38, "m"), 32),
        ((39, "m"), 33),
        ((40, "m"), 34),
        ((41, "m"), 35),
        ((42, "m"), 36),
        ((43, "m"), 37),
        ((44, "m"), 38),
        ((45, "m"), 39),
        ((46, "m"), 40),
        ((47, "m"), 41),
        ((48, "m"), 42),
        ((49, "m"), 43),
        ((50, "m"), 44),
        ((51, "m"), 45),
        ((52, "m"), 46),
        ((53, "m"), 47),
        ((54, "m"), 48),
        ((55, "m"), 49),
        ((56, "m"), 50),
        ((57, "m"), 51),
        ((58, "m"), 52),
        ((59, "m"), 53),
        ((60, "d"), None),
        ((61, "d"), None),
        ((62, "m"), 54),
        ((63, "m"), 55),
        ((64, "m"), 56),
        ((65, "m"), 57),
        ((66, "m"), 58),
        ((67, "m"), 59),
        ((68, "m"), 60),
        ((69, "m"), 61),
        ((70, "m"), 62),
        ((71, "m"), 63),
        ((72, "m"), 64),
        ((73, "d"), None),
        ((74, "m"), 65),
        ((75, "m"), 66),
        ((76, "m"), 67),
        ((77, "m"), 68),
        ((78, "m"), 69),
        ((79, "m"), 70),
        ((80, "m"), 71),
        ((81, "m"), 72),
        ((82, "m"), 73),
        ((83, "i"), 74),
        ((83, "i"), 75),
        ((83, "i"), 76),
        ((83, "i"), 77),
        ((83, "i"), 78),
        ((83, "i"), 79),
        ((83, "i"), 80),
        ((83, "i"), 81),
        ((83, "m"), 82),
        ((84, "m"), 83),
        ((85, "m"), 84),
        ((86, "m"), 85),
        ((87, "m"), 86),
        ((88, "m"), 87),
        ((89, "m"), 88),
        ((90, "m"), 89),
        ((91, "m"), 90),
        ((92, "m"), 91),
        ((93, "m"), 92),
        ((94, "m"), 93),
        ((95, "m"), 94),
        ((96, "m"), 95),
        ((97, "m"), 96),
        ((98, "m"), 97),
        ((99, "m"), 98),
        ((100, "m"), 99),
        ((101, "m"), 100),
        ((102, "m"), 101),
        ((103, "m"), 102),
        ((104, "m"), 103),
        ((105, "m"), 104),
        ((106, "m"), 105),
        ((107, "m"), 106),
        ((108, "m"), 107),
        ((109, "m"), 108),
        ((110, "m"), 109),
        ((111, "m"), 110),
        ((112, "m"), 111),
        ((113, "m"), 112),
        ((114, "m"), 113),
        ((115, "m"), 114),
        ((116, "i"), 115),
        ((116, "i"), 116),
        ((116, "i"), 117),
        ((116, "i"), 118),
        ((116, "i"), 119),
        ((116, "i"), 120),
        ((116, "i"), 121),
        ((116, "i"), 122),
        ((116, "i"), 123),
        ((116, "i"), 124),
        ((116, "i"), 125),
        ((116, "i"), 126),
        ((116, "i"), 127),
        ((116, "i"), 128),
        ((116, "i"), 129),
        ((116, "i"), 130),
        ((116, "i"), 131),
        ((116, "i"), 132),
        ((116, "i"), 133),
        ((116, "i"), 134),
        ((116, "i"), 135),
        ((116, "i"), 136),
        ((116, "i"), 137),
        ((116, "i"), 138),
        ((116, "i"), 139),
        ((116, "i"), 140),
        ((116, "i"), 141),
        ((116, "i"), 142),
        ((116, "i"), 143),
        ((116, "i"), 144),
        ((116, "i"), 145),
        ((116, "i"), 146),
        ((116, "i"), 147),
        ((116, "i"), 148),
        ((116, "i"), 149),
        ((116, "i"), 150),
        ((116, "i"), 151),
        ((116, "i"), 152),
        ((116, "i"), 153),
        ((116, "i"), 154),
        ((116, "i"), 155),
        ((116, "i"), 156),
        ((116, "i"), 157),
        ((116, "i"), 158),
        ((116, "i"), 159),
        ((116, "i"), 160),
        ((116, "i"), 161),
        ((116, "i"), 162),
        ((116, "i"), 163),
        ((116, "i"), 164),
        ((116, "i"), 165),
        ((116, "i"), 166),
        ((116, "i"), 167),
        ((116, "i"), 168),
        ((116, "i"), 169),
        ((116, "i"), 170),
        ((116, "i"), 171),
        ((116, "i"), 172),
        ((116, "i"), 173),
        ((116, "i"), 174),
        ((116, "i"), 175),
        ((116, "i"), 176),
        ((116, "i"), 177),
        ((116, "i"), 178),
        ((116, "i"), 179),
        ((116, "i"), 180),
        ((116, "i"), 181),
        ((116, "i"), 182),
        ((116, "i"), 183),
        ((116, "i"), 184),
        ((116, "i"), 185),
        ((116, "i"), 186),
        ((116, "i"), 187),
        ((116, "i"), 188),
        ((116, "i"), 189),
        ((116, "i"), 190),
        ((116, "i"), 191),
        ((116, "i"), 192),
        ((116, "i"), 193),
        ((116, "i"), 194),
        ((116, "i"), 195),
        ((116, "i"), 196),
        ((116, "i"), 197),
        ((116, "i"), 198),
        ((116, "i"), 199),
        ((116, "i"), 200),
        ((116, "i"), 201),
        ((116, "i"), 202),
        ((116, "i"), 203),
        ((116, "i"), 204),
        ((116, "i"), 205),
        ((116, "i"), 206),
        ((116, "i"), 207),
        ((116, "i"), 208),
        ((116, "i"), 209),
        ((116, "i"), 210),
        ((116, "i"), 211),
        ((116, "i"), 212),
        ((116, "i"), 213),
        ((116, "i"), 214),
        ((116, "i"), 215),
        ((116, "i"), 216),
        ((116, "i"), 217),
        ((116, "i"), 218),
        ((116, "i"), 219),
        ((116, "i"), 220),
        ((116, "i"), 221),
        ((116, "i"), 222),
        ((116, "i"), 223),
        ((116, "i"), 224),
        ((116, "i"), 225),
        ((116, "i"), 226),
        ((116, "i"), 227),
        ((116, "i"), 228),
        ((116, "i"), 229),
        ((116, "i"), 230),
        ((117, "m"), 231),
        ((118, "m"), 232),
        ((119, "m"), 233),
        ((120, "m"), 234),
        ((121, "m"), 235),
        ((122, "m"), 236),
        ((123, "m"), 237),
        ((124, "m"), 238),
        ((125, "m"), 239),
        ((126, "m"), 240),
        ((127, "m"), 241),
        ((128, "m"), 242),
    ]
    with pytest.raises(LongHCDR3Error):
        number_chothia_heavy(state_vector, sequence)


def test_number_chothia_light():
    """
    chothia light testing.
    """
    # FW3 of length 33 edgecase | first deletion on 68
    sequence = (
        "QSVLTQPPSVSAAPGQNVTISCSGPPSHIEKNDVSWYQRFPGMAPKMLIYESYRRPAGIPARFSASRGKSATLTITGLQTGDEADYYTWNGRMNFGTGTTVTVL"
    )
    state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "d"), None),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "m"), 16),
        ((19, "m"), 17),
        ((20, "m"), 18),
        ((21, "m"), 19),
        ((22, "m"), 20),
        ((23, "m"), 21),
        ((24, "m"), 22),
        ((25, "m"), 23),
        ((26, "m"), 24),
        ((27, "m"), 25),
        ((28, "m"), 26),
        ((29, "m"), 27),
        ((30, "m"), 28),
        ((31, "d"), None),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "m"), 29),
        ((36, "m"), 30),
        ((37, "m"), 31),
        ((38, "m"), 32),
        ((39, "m"), 33),
        ((40, "m"), 34),
        ((41, "m"), 35),
        ((42, "m"), 36),
        ((43, "m"), 37),
        ((44, "m"), 38),
        ((45, "m"), 39),
        ((46, "m"), 40),
        ((47, "m"), 41),
        ((48, "m"), 42),
        ((49, "m"), 43),
        ((50, "m"), 44),
        ((51, "m"), 45),
        ((52, "m"), 46),
        ((53, "m"), 47),
        ((54, "m"), 48),
        ((55, "m"), 49),
        ((56, "m"), 50),
        ((57, "m"), 51),
        ((58, "d"), None),
        ((59, "d"), None),
        ((60, "d"), None),
        ((61, "d"), None),
        ((62, "d"), None),
        ((63, "d"), None),
        ((64, "d"), None),
        ((65, "m"), 52),
        ((66, "m"), 53),
        ((67, "m"), 54),
        ((68, "m"), 55),
        ((69, "m"), 56),
        ((70, "m"), 57),
        ((71, "m"), 58),
        ((72, "m"), 59),
        ((73, "d"), None),
        ((74, "m"), 60),
        ((75, "m"), 61),
        ((76, "m"), 62),
        ((77, "m"), 63),
        ((78, "m"), 64),
        ((79, "m"), 65),
        ((80, "m"), 66),
        ((81, "d"), None),
        ((82, "d"), None),
        ((83, "d"), None),
        ((84, "m"), 67),
        ((85, "m"), 68),
        ((86, "m"), 69),
        ((87, "m"), 70),
        ((88, "m"), 71),
        ((89, "m"), 72),
        ((90, "m"), 73),
        ((91, "m"), 74),
        ((92, "m"), 75),
        ((93, "m"), 76),
        ((94, "m"), 77),
        ((95, "m"), 78),
        ((96, "m"), 79),
        ((97, "m"), 80),
        ((98, "m"), 81),
        ((99, "m"), 82),
        ((100, "m"), 83),
        ((101, "m"), 84),
        ((102, "m"), 85),
        ((103, "m"), 86),
        ((104, "m"), 87),
        ((105, "m"), 88),
        ((106, "m"), 89),
        ((107, "m"), 90),
        ((108, "m"), 91),
        ((109, "d"), None),
        ((110, "d"), None),
        ((111, "d"), None),
        ((112, "d"), None),
        ((113, "d"), None),
        ((114, "d"), None),
        ((115, "d"), None),
        ((116, "m"), 92),
        ((117, "m"), 93),
        ((118, "m"), 94),
        ((119, "m"), 95),
        ((120, "m"), 96),
        ((121, "m"), 97),
        ((122, "m"), 98),
        ((123, "m"), 99),
        ((124, "m"), 100),
        ((125, "m"), 101),
        ((126, "m"), 102),
        ((127, "m"), 103),
    ]
    numbering, startindex, endindex = number_chothia_light(state_vector, sequence)
    assert numbering == [
        ((1, " "), "Q"),
        ((2, " "), "S"),
        ((3, " "), "V"),
        ((4, " "), "L"),
        ((5, " "), "T"),
        ((6, " "), "Q"),
        ((7, " "), "P"),
        ((8, " "), "P"),
        ((9, " "), "S"),
        ((10, " "), "-"),
        ((11, " "), "V"),
        ((12, " "), "S"),
        ((13, " "), "A"),
        ((14, " "), "A"),
        ((15, " "), "P"),
        ((16, " "), "G"),
        ((17, " "), "Q"),
        ((18, " "), "N"),
        ((19, " "), "V"),
        ((20, " "), "T"),
        ((21, " "), "I"),
        ((22, " "), "S"),
        ((23, " "), "C"),
        ((24, " "), "S"),
        ((25, " "), "G"),
        ((26, " "), "P"),
        ((27, " "), "P"),
        ((28, " "), "S"),
        ((29, " "), "H"),
        ((30, " "), "I"),
        ((30, "A"), "E"),
        ((30, "B"), "K"),
        ((31, " "), "N"),
        ((32, " "), "D"),
        ((33, " "), "V"),
        ((34, " "), "S"),
        ((35, " "), "W"),
        ((36, " "), "Y"),
        ((37, " "), "Q"),
        ((38, " "), "R"),
        ((39, " "), "F"),
        ((40, " "), "P"),
        ((41, " "), "G"),
        ((42, " "), "M"),
        ((43, " "), "A"),
        ((44, " "), "P"),
        ((45, " "), "K"),
        ((46, " "), "M"),
        ((47, " "), "L"),
        ((48, " "), "I"),
        ((49, " "), "Y"),
        ((50, " "), "E"),
        ((51, " "), "S"),
        ((52, " "), "Y"),
        ((53, " "), "R"),
        ((54, " "), "R"),
        ((55, " "), "P"),
        ((56, " "), "A"),
        ((57, " "), "G"),
        ((58, " "), "I"),
        ((59, " "), "P"),
        ((60, " "), "A"),
        ((61, " "), "R"),
        ((62, " "), "F"),
        ((63, " "), "S"),
        ((64, " "), "A"),
        ((65, " "), "S"),
        ((66, " "), "R"),
        ((67, " "), "G"),
        ((68, " "), "-"),
        ((69, " "), "K"),
        ((70, " "), "S"),
        ((71, " "), "A"),
        ((72, " "), "T"),
        ((73, " "), "L"),
        ((74, " "), "T"),
        ((75, " "), "I"),
        ((76, " "), "T"),
        ((77, " "), "G"),
        ((78, " "), "L"),
        ((79, " "), "Q"),
        ((80, " "), "T"),
        ((81, " "), "G"),
        ((82, " "), "D"),
        ((83, " "), "E"),
        ((84, " "), "A"),
        ((85, " "), "D"),
        ((86, " "), "Y"),
        ((87, " "), "Y"),
        ((88, " "), "T"),
        ((89, " "), "W"),
        ((90, " "), "N"),
        ((91, " "), "G"),
        ((92, " "), "R"),
        ((93, " "), "-"),
        ((94, " "), "-"),
        ((95, " "), "-"),
        ((96, " "), "M"),
        ((97, " "), "N"),
        ((98, " "), "F"),
        ((99, " "), "G"),
        ((100, " "), "T"),
        ((101, " "), "G"),
        ((102, " "), "T"),
        ((103, " "), "T"),
        ((104, " "), "V"),
        ((105, " "), "T"),
        ((106, " "), "V"),
        ((107, " "), "L"),
    ]
    # CDR3 over length 35
    sequence = "QSVLTQPPSVSAAPPGQNVTISCSGPPSHIEKNDVSWYQRFPGMAPKMLIYESYRRPAGIPARFSASRGKSATLTITGLQTGDEADYYCTWNGRMNTTNTTRMNTTTTNTTRMNTTNTTTTTTTTFGTGTTVTVL"
    state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "d"), None),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "m"), 16),
        ((19, "m"), 17),
        ((20, "m"), 18),
        ((21, "m"), 19),
        ((22, "m"), 20),
        ((23, "m"), 21),
        ((24, "m"), 22),
        ((25, "m"), 23),
        ((26, "m"), 24),
        ((27, "m"), 25),
        ((28, "m"), 26),
        ((29, "m"), 27),
        ((30, "m"), 28),
        ((31, "d"), None),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "m"), 29),
        ((36, "m"), 30),
        ((37, "m"), 31),
        ((38, "m"), 32),
        ((39, "m"), 33),
        ((40, "m"), 34),
        ((41, "m"), 35),
        ((42, "m"), 36),
        ((43, "m"), 37),
        ((44, "m"), 38),
        ((45, "m"), 39),
        ((46, "m"), 40),
        ((47, "m"), 41),
        ((48, "m"), 42),
        ((49, "m"), 43),
        ((50, "m"), 44),
        ((51, "m"), 45),
        ((52, "m"), 46),
        ((53, "m"), 47),
        ((54, "m"), 48),
        ((55, "m"), 49),
        ((56, "m"), 50),
        ((57, "m"), 51),
        ((58, "d"), None),
        ((59, "d"), None),
        ((60, "d"), None),
        ((61, "d"), None),
        ((62, "d"), None),
        ((63, "d"), None),
        ((64, "d"), None),
        ((65, "m"), 52),
        ((66, "m"), 53),
        ((67, "m"), 54),
        ((68, "m"), 55),
        ((69, "m"), 56),
        ((70, "m"), 57),
        ((71, "m"), 58),
        ((72, "m"), 59),
        ((73, "d"), None),
        ((74, "m"), 60),
        ((75, "m"), 61),
        ((76, "m"), 62),
        ((77, "m"), 63),
        ((78, "m"), 64),
        ((79, "m"), 65),
        ((80, "m"), 66),
        ((81, "d"), None),
        ((82, "d"), None),
        ((83, "d"), None),
        ((84, "m"), 67),
        ((85, "m"), 68),
        ((86, "m"), 69),
        ((87, "m"), 70),
        ((88, "m"), 71),
        ((89, "m"), 72),
        ((90, "m"), 73),
        ((91, "m"), 74),
        ((92, "m"), 75),
        ((93, "m"), 76),
        ((94, "m"), 77),
        ((95, "m"), 78),
        ((96, "m"), 79),
        ((97, "m"), 80),
        ((98, "m"), 81),
        ((99, "m"), 82),
        ((100, "m"), 83),
        ((101, "m"), 84),
        ((102, "m"), 85),
        ((103, "m"), 86),
        ((104, "m"), 87),
        ((105, "m"), 88),
        ((106, "m"), 89),
        ((107, "m"), 90),
        ((108, "m"), 91),
        ((109, "m"), 92),
        ((110, "m"), 93),
        ((111, "m"), 94),
        ((112, "i"), 95),
        ((112, "i"), 96),
        ((112, "i"), 97),
        ((112, "i"), 98),
        ((112, "i"), 99),
        ((112, "i"), 100),
        ((112, "i"), 101),
        ((112, "i"), 102),
        ((112, "i"), 103),
        ((112, "i"), 104),
        ((112, "i"), 105),
        ((112, "i"), 106),
        ((112, "i"), 107),
        ((112, "i"), 108),
        ((112, "i"), 109),
        ((112, "i"), 110),
        ((112, "i"), 111),
        ((112, "i"), 112),
        ((112, "i"), 113),
        ((112, "i"), 114),
        ((112, "i"), 115),
        ((112, "i"), 116),
        ((112, "i"), 117),
        ((112, "m"), 118),
        ((113, "m"), 119),
        ((114, "m"), 120),
        ((115, "m"), 121),
        ((116, "m"), 122),
        ((117, "m"), 123),
        ((118, "m"), 124),
        ((119, "m"), 125),
        ((120, "m"), 126),
        ((121, "m"), 127),
        ((122, "m"), 128),
        ((123, "m"), 129),
        ((124, "m"), 130),
        ((125, "m"), 131),
        ((126, "m"), 132),
        ((127, "m"), 133),
    ]
    numbering, _, _ = number_chothia_light(state_vector, sequence)


def test_number_kabat_heavy():
    """
    kabat heavy numbering testing.
    """
    # CDR3 over length 72, numbering should be an empty list.
    sequence = "QGQLVQSGGELKKPGASVKISCKTSGYRFSFYHINWIRQLVGRGPEWMGWISPYNGGTNLAPELRGRLVLTTEREVVDTMTLSTGTAHMELRNLRSDDTGIYFCAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLAKGLLRDGSSTWLPHLWGQGTLLTVSS"
    state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "d"), None),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "m"), 16),
        ((19, "m"), 17),
        ((20, "m"), 18),
        ((21, "m"), 19),
        ((22, "m"), 20),
        ((23, "m"), 21),
        ((24, "m"), 22),
        ((25, "m"), 23),
        ((26, "m"), 24),
        ((27, "m"), 25),
        ((28, "m"), 26),
        ((29, "m"), 27),
        ((30, "m"), 28),
        ((31, "d"), None),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "m"), 29),
        ((36, "m"), 30),
        ((37, "m"), 31),
        ((38, "m"), 32),
        ((39, "m"), 33),
        ((40, "m"), 34),
        ((41, "m"), 35),
        ((42, "m"), 36),
        ((43, "m"), 37),
        ((44, "m"), 38),
        ((45, "m"), 39),
        ((46, "m"), 40),
        ((47, "m"), 41),
        ((48, "m"), 42),
        ((49, "m"), 43),
        ((50, "m"), 44),
        ((51, "m"), 45),
        ((52, "m"), 46),
        ((53, "m"), 47),
        ((54, "m"), 48),
        ((55, "m"), 49),
        ((56, "m"), 50),
        ((57, "m"), 51),
        ((58, "m"), 52),
        ((59, "m"), 53),
        ((60, "d"), None),
        ((61, "d"), None),
        ((62, "m"), 54),
        ((63, "m"), 55),
        ((64, "m"), 56),
        ((65, "m"), 57),
        ((66, "m"), 58),
        ((67, "m"), 59),
        ((68, "m"), 60),
        ((69, "m"), 61),
        ((70, "m"), 62),
        ((71, "m"), 63),
        ((72, "m"), 64),
        ((73, "d"), None),
        ((74, "m"), 65),
        ((75, "m"), 66),
        ((76, "m"), 67),
        ((77, "m"), 68),
        ((78, "m"), 69),
        ((79, "m"), 70),
        ((80, "m"), 71),
        ((81, "m"), 72),
        ((82, "m"), 73),
        ((83, "i"), 74),
        ((83, "i"), 75),
        ((83, "i"), 76),
        ((83, "i"), 77),
        ((83, "i"), 78),
        ((83, "i"), 79),
        ((83, "i"), 80),
        ((83, "i"), 81),
        ((83, "m"), 82),
        ((84, "m"), 83),
        ((85, "m"), 84),
        ((86, "m"), 85),
        ((87, "m"), 86),
        ((88, "m"), 87),
        ((89, "m"), 88),
        ((90, "m"), 89),
        ((91, "m"), 90),
        ((92, "m"), 91),
        ((93, "m"), 92),
        ((94, "m"), 93),
        ((95, "m"), 94),
        ((96, "m"), 95),
        ((97, "m"), 96),
        ((98, "m"), 97),
        ((99, "m"), 98),
        ((100, "m"), 99),
        ((101, "m"), 100),
        ((102, "m"), 101),
        ((103, "m"), 102),
        ((104, "m"), 103),
        ((105, "m"), 104),
        ((106, "m"), 105),
        ((107, "m"), 106),
        ((108, "m"), 107),
        ((109, "m"), 108),
        ((110, "m"), 109),
        ((111, "m"), 110),
        ((112, "m"), 111),
        ((113, "m"), 112),
        ((114, "m"), 113),
        ((115, "m"), 114),
        ((116, "i"), 115),
        ((116, "i"), 116),
        ((116, "i"), 117),
        ((116, "i"), 118),
        ((116, "i"), 119),
        ((116, "i"), 120),
        ((116, "i"), 121),
        ((116, "i"), 122),
        ((116, "i"), 123),
        ((116, "i"), 124),
        ((116, "i"), 125),
        ((116, "i"), 126),
        ((116, "i"), 127),
        ((116, "i"), 128),
        ((116, "i"), 129),
        ((116, "i"), 130),
        ((116, "i"), 131),
        ((116, "i"), 132),
        ((116, "i"), 133),
        ((116, "i"), 134),
        ((116, "i"), 135),
        ((116, "i"), 136),
        ((116, "i"), 137),
        ((116, "i"), 138),
        ((116, "i"), 139),
        ((116, "i"), 140),
        ((116, "i"), 141),
        ((116, "i"), 142),
        ((116, "i"), 143),
        ((116, "i"), 144),
        ((116, "i"), 145),
        ((116, "i"), 146),
        ((116, "i"), 147),
        ((116, "i"), 148),
        ((116, "i"), 149),
        ((116, "i"), 150),
        ((116, "i"), 151),
        ((116, "i"), 152),
        ((116, "i"), 153),
        ((116, "i"), 154),
        ((116, "i"), 155),
        ((116, "i"), 156),
        ((116, "i"), 157),
        ((116, "i"), 158),
        ((116, "i"), 159),
        ((116, "i"), 160),
        ((116, "i"), 161),
        ((116, "i"), 162),
        ((116, "i"), 163),
        ((116, "i"), 164),
        ((116, "i"), 165),
        ((116, "i"), 166),
        ((116, "i"), 167),
        ((116, "i"), 168),
        ((116, "i"), 169),
        ((116, "i"), 170),
        ((116, "i"), 171),
        ((116, "i"), 172),
        ((116, "i"), 173),
        ((116, "i"), 174),
        ((116, "i"), 175),
        ((116, "i"), 176),
        ((116, "i"), 177),
        ((116, "i"), 178),
        ((116, "i"), 179),
        ((116, "i"), 180),
        ((116, "i"), 181),
        ((116, "i"), 182),
        ((116, "i"), 183),
        ((116, "i"), 184),
        ((116, "i"), 185),
        ((116, "i"), 186),
        ((116, "i"), 187),
        ((116, "i"), 188),
        ((116, "i"), 189),
        ((116, "i"), 190),
        ((116, "i"), 191),
        ((116, "i"), 192),
        ((116, "i"), 193),
        ((116, "i"), 194),
        ((116, "i"), 195),
        ((116, "i"), 196),
        ((116, "i"), 197),
        ((116, "i"), 198),
        ((116, "i"), 199),
        ((116, "i"), 200),
        ((116, "i"), 201),
        ((116, "i"), 202),
        ((116, "i"), 203),
        ((116, "i"), 204),
        ((116, "i"), 205),
        ((116, "i"), 206),
        ((116, "i"), 207),
        ((116, "i"), 208),
        ((116, "i"), 209),
        ((116, "i"), 210),
        ((116, "i"), 211),
        ((116, "i"), 212),
        ((116, "i"), 213),
        ((116, "i"), 214),
        ((116, "i"), 215),
        ((116, "i"), 216),
        ((116, "i"), 217),
        ((116, "i"), 218),
        ((116, "i"), 219),
        ((116, "i"), 220),
        ((116, "i"), 221),
        ((116, "i"), 222),
        ((116, "i"), 223),
        ((116, "i"), 224),
        ((116, "i"), 225),
        ((116, "i"), 226),
        ((116, "i"), 227),
        ((116, "i"), 228),
        ((116, "i"), 229),
        ((116, "i"), 230),
        ((117, "m"), 231),
        ((118, "m"), 232),
        ((119, "m"), 233),
        ((120, "m"), 234),
        ((121, "m"), 235),
        ((122, "m"), 236),
        ((123, "m"), 237),
        ((124, "m"), 238),
        ((125, "m"), 239),
        ((126, "m"), 240),
        ((127, "m"), 241),
        ((128, "m"), 242),
    ]
    with pytest.raises(LongHCDR3Error):
        number_kabat_heavy(state_vector, sequence)


def test_number_kabat_light():
    """
    kabat light numbering testing.
    """
    # CDR3 over length 35, numbering should be an empty list.
    # CDR3 over length 35
    sequence = "QSVLTQPPSVSAAPPGQNVTISCSGPPSHIEKNDVSWYQRFPGMAPKMLIYESYRRPAGIPARFSASRGKSATLTITGLQTGDEADYYCTWNGRMNTTNTTRMNTTTTNTTRMNTTNTTTTTTTTFGTGTTVTVL"
    state_vector = [
        ((1, "m"), 0),
        ((2, "m"), 1),
        ((3, "m"), 2),
        ((4, "m"), 3),
        ((5, "m"), 4),
        ((6, "m"), 5),
        ((7, "m"), 6),
        ((8, "m"), 7),
        ((9, "m"), 8),
        ((10, "d"), None),
        ((11, "m"), 9),
        ((12, "m"), 10),
        ((13, "m"), 11),
        ((14, "m"), 12),
        ((15, "m"), 13),
        ((16, "m"), 14),
        ((17, "m"), 15),
        ((18, "m"), 16),
        ((19, "m"), 17),
        ((20, "m"), 18),
        ((21, "m"), 19),
        ((22, "m"), 20),
        ((23, "m"), 21),
        ((24, "m"), 22),
        ((25, "m"), 23),
        ((26, "m"), 24),
        ((27, "m"), 25),
        ((28, "m"), 26),
        ((29, "m"), 27),
        ((30, "m"), 28),
        ((31, "d"), None),
        ((32, "d"), None),
        ((33, "d"), None),
        ((34, "d"), None),
        ((35, "m"), 29),
        ((36, "m"), 30),
        ((37, "m"), 31),
        ((38, "m"), 32),
        ((39, "m"), 33),
        ((40, "m"), 34),
        ((41, "m"), 35),
        ((42, "m"), 36),
        ((43, "m"), 37),
        ((44, "m"), 38),
        ((45, "m"), 39),
        ((46, "m"), 40),
        ((47, "m"), 41),
        ((48, "m"), 42),
        ((49, "m"), 43),
        ((50, "m"), 44),
        ((51, "m"), 45),
        ((52, "m"), 46),
        ((53, "m"), 47),
        ((54, "m"), 48),
        ((55, "m"), 49),
        ((56, "m"), 50),
        ((57, "m"), 51),
        ((58, "d"), None),
        ((59, "d"), None),
        ((60, "d"), None),
        ((61, "d"), None),
        ((62, "d"), None),
        ((63, "d"), None),
        ((64, "d"), None),
        ((65, "m"), 52),
        ((66, "m"), 53),
        ((67, "m"), 54),
        ((68, "m"), 55),
        ((69, "m"), 56),
        ((70, "m"), 57),
        ((71, "m"), 58),
        ((72, "m"), 59),
        ((73, "d"), None),
        ((74, "m"), 60),
        ((75, "m"), 61),
        ((76, "m"), 62),
        ((77, "m"), 63),
        ((78, "m"), 64),
        ((79, "m"), 65),
        ((80, "m"), 66),
        ((81, "d"), None),
        ((82, "d"), None),
        ((83, "d"), None),
        ((84, "m"), 67),
        ((85, "m"), 68),
        ((86, "m"), 69),
        ((87, "m"), 70),
        ((88, "m"), 71),
        ((89, "m"), 72),
        ((90, "m"), 73),
        ((91, "m"), 74),
        ((92, "m"), 75),
        ((93, "m"), 76),
        ((94, "m"), 77),
        ((95, "m"), 78),
        ((96, "m"), 79),
        ((97, "m"), 80),
        ((98, "m"), 81),
        ((99, "m"), 82),
        ((100, "m"), 83),
        ((101, "m"), 84),
        ((102, "m"), 85),
        ((103, "m"), 86),
        ((104, "m"), 87),
        ((105, "m"), 88),
        ((106, "m"), 89),
        ((107, "m"), 90),
        ((108, "m"), 91),
        ((109, "m"), 92),
        ((110, "m"), 93),
        ((111, "m"), 94),
        ((112, "i"), 95),
        ((112, "i"), 96),
        ((112, "i"), 97),
        ((112, "i"), 98),
        ((112, "i"), 99),
        ((112, "i"), 100),
        ((112, "i"), 101),
        ((112, "i"), 102),
        ((112, "i"), 103),
        ((112, "i"), 104),
        ((112, "i"), 105),
        ((112, "i"), 106),
        ((112, "i"), 107),
        ((112, "i"), 108),
        ((112, "i"), 109),
        ((112, "i"), 110),
        ((112, "i"), 111),
        ((112, "i"), 112),
        ((112, "i"), 113),
        ((112, "i"), 114),
        ((112, "i"), 115),
        ((112, "i"), 116),
        ((112, "i"), 117),
        ((112, "m"), 118),
        ((113, "m"), 119),
        ((114, "m"), 120),
        ((115, "m"), 121),
        ((116, "m"), 122),
        ((117, "m"), 123),
        ((118, "m"), 124),
        ((119, "m"), 125),
        ((120, "m"), 126),
        ((121, "m"), 127),
        ((122, "m"), 128),
        ((123, "m"), 129),
        ((124, "m"), 130),
        ((125, "m"), 131),
        ((126, "m"), 132),
        ((127, "m"), 133),
    ]
    numbering, _, _ = number_kabat_light(state_vector, sequence)


def test_cdr3_annotations():
    """
    Stress cdr3 annotations function by hitting the unused imgt scheme and raises.
    """
    # Test IMGT scheme
    for i in range(1, 20):
        annotations = get_cdr3_annotations(length=i, scheme="imgt", chain_type="heavy")
        assert annotations != []
    # Test raise AssertionError for unimpletemented scheme
    with pytest.raises(AssertionError):
        get_cdr3_annotations(length=10, scheme="unimplemented", chain_type="heavy")
