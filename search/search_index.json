{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"S equencing A nalysis and D ata Library for I mmunoinformatics E xploration About \u00b6 Documentation : https://sadie.jordanrwillis.com Source Code : https://github.com/jwillis0720/sadie SADIE is the S equencing A nalysis and D ata library for I mmunoinformatics E xploration. The key feautures include: Provide pre-built command line apps for popular immunoinformatics applications. Provide a low-level API framework for immunoinformatics developers to build higher level tools. Provide a testable and reusable library that WORKS! Provide a customizable and verified germline reference library. Maintain data formats consistent with standards governed by the AIRR community Portability ready to use out the box. SADIE is billed as a \" complete antibody library \", not because it aims to do everything, but because it aims to meet the needs of all immunoinformatics users. SADIE contains both low, mid and high level functionality for immunoinformatics tools and workflows. You can use SADIE as a framework to develop your own tools, use many of the prebuilt contributed tools, or run it in a notebook to enable data exploration. In addition, SADIE aims to port all code to python because relies heavily on the Pandas library, the workhorse of the data science/machine learning age. Installation \u00b6 Installation is handled using the python package installer pip $ pip install sadie-antibody ---> 100% The Littlest Usage \u00b6 Consult the documentation for complete usage Command Line Usage \u00b6 Command Line Usage Python Annotate antibody sequences only from functional human IMGT antibodies to a gzip output $ sadie airr -s human -db-type imgt my_sequences.fasta output.csv Use the SADIE library to annotate sequences # import the SADIE Airr module from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) . fillna ( \"\" ) # write airr table to tsv or tsv.gz/bz airr_table . to_airr ( \"PG9 AIRR.tsv\" ) # compress your airr table into a bzip or gzip filecxx airr_table . to_airr ( \"PG9 AIRR.tsv.gz\" ) airr_table . to_airr ( \"PG9 AIRR.tsv.bz2\" ) License \u00b6 Copyright \u00a9 Jordan R. Willis and Troy Sincomb","title":"SADIE"},{"location":"#about","text":"Documentation : https://sadie.jordanrwillis.com Source Code : https://github.com/jwillis0720/sadie SADIE is the S equencing A nalysis and D ata library for I mmunoinformatics E xploration. The key feautures include: Provide pre-built command line apps for popular immunoinformatics applications. Provide a low-level API framework for immunoinformatics developers to build higher level tools. Provide a testable and reusable library that WORKS! Provide a customizable and verified germline reference library. Maintain data formats consistent with standards governed by the AIRR community Portability ready to use out the box. SADIE is billed as a \" complete antibody library \", not because it aims to do everything, but because it aims to meet the needs of all immunoinformatics users. SADIE contains both low, mid and high level functionality for immunoinformatics tools and workflows. You can use SADIE as a framework to develop your own tools, use many of the prebuilt contributed tools, or run it in a notebook to enable data exploration. In addition, SADIE aims to port all code to python because relies heavily on the Pandas library, the workhorse of the data science/machine learning age.","title":"About"},{"location":"#installation","text":"Installation is handled using the python package installer pip $ pip install sadie-antibody ---> 100%","title":"Installation"},{"location":"#the-littlest-usage","text":"Consult the documentation for complete usage","title":"The Littlest Usage"},{"location":"#command-line-usage","text":"Command Line Usage Python Annotate antibody sequences only from functional human IMGT antibodies to a gzip output $ sadie airr -s human -db-type imgt my_sequences.fasta output.csv Use the SADIE library to annotate sequences # import the SADIE Airr module from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) . fillna ( \"\" ) # write airr table to tsv or tsv.gz/bz airr_table . to_airr ( \"PG9 AIRR.tsv\" ) # compress your airr table into a bzip or gzip filecxx airr_table . to_airr ( \"PG9 AIRR.tsv.gz\" ) airr_table . to_airr ( \"PG9 AIRR.tsv.bz2\" )","title":"Command Line Usage"},{"location":"#license","text":"Copyright \u00a9 Jordan R. Willis and Troy Sincomb","title":"License"},{"location":"advanced_annotation/","text":"","title":"Advanced Annotation Methods"},{"location":"annotation/","text":"AIRR Annotation \u00b6 Annotation is the bedrock of all immunoformatics workflows. It is the process of identifying CDRs/frameworks, levels of somatic mutation, locus use, productive rearragements, and other features that describe the B cell receptor or T cell recptor (BCR/TCR). In the description of a BCR/TCR, how can we use the data file output from one data pipeline can be compared to another? In other words, what if the description of a reperotire has different fields and datatypes that describe a repertoire or even a single BCR/TCR? Fear not! The AIRR community to the rescue ! \" AIRR Data Representations are versioned specifications that consist of a file format and a well-defined schema[...] The schema defines the data model, field names, data types, and encodings for AIRR standard objects. Strict typing enables interoperability and data sharing between different AIRR-seq analysis tools and repositories[...] \" The AIRR Standards 1.3 documentation SADIE leverages the AIRR to provide a standardized data representation for BCRs. You can read all the fields and values in the AIRR Rearrangment shema standard here Single Sequence Annotation \u00b6 # use Airr module # import pandas for dataframe handling import pandas as pd from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) # output object types print ( type ( airr_table )) print ( isinstance ( airr_table , pd . DataFrame )) The output will contain <class 'sadie.airr.airrtable.airrtable.AirrTable'> and shows that the output is an instance of the AirrTable class. Info Running an AIRR method generates an AIRR table object. The AIRR table is a subclass of a pandas dataframe and thus can be used by any pandas method. Pandas is the workhorse of the SADIE library so we highly encourage some rudimentary knowledge of pandas to get maximize SAIDIE functionality. Writing Files \u00b6 AIRR Rearrangment File \u00b6 To output an AIRR file, we can use the AirrTable.to_airr() method. # import the SADIE Airr module from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) . fillna ( \"\" ) # write airr table to tsv or tsv.gz/bz airr_table . to_airr ( \"PG9 AIRR.tsv\" ) # compress your airr table into a bzip or gzip filecxx airr_table . to_airr ( \"PG9 AIRR.tsv.gz\" ) airr_table . to_airr ( \"PG9 AIRR.tsv.bz2\" ) The tsv file PG9 AIRR.tsv generated will be a tabular datafile that will resemble the following: sequence_id sequence species locus stop_codon vj_in_frame v_frameshift productive rev_comp complete_vdj v_call_top v_call d_call_top d_call j_call_top j_call sequence_alignment germline_alignment sequence_alignment_aa germline_alignment_aa v_alignment_start v_alignment_end d_alignment_start d_alignment_end j_alignment_start j_alignment_end v_sequence_alignment v_sequence_alignment_aa v_germline_alignment v_germline_alignment_aa d_sequence_alignment d_sequence_alignment_aa d_germline_alignment d_germline_alignment_aa j_sequence_alignment j_sequence_alignment_aa j_germline_alignment j_germline_alignment_aa fwr1 fwr1_aa cdr1 cdr1_aa fwr2 fwr2_aa cdr2 cdr2_aa fwr3 fwr3_aa fwr4 fwr4_aa cdr3 cdr3_aa junction junction_length junction_aa junction_aa_length v_score d_score j_score v_cigar d_cigar j_cigar v_support d_support j_support v_identity d_identity j_identity v_sequence_start v_sequence_end v_germline_start v_germline_end d_sequence_start d_sequence_end d_germline_start d_germline_end j_sequence_start j_sequence_end j_germline_start j_germline_end fwr1_start fwr1_end cdr1_start cdr1_end fwr2_start fwr2_end cdr2_start cdr2_end fwr3_start fwr3_end fwr4_start fwr4_end cdr3_start cdr3_end np1 np1_length np2 np2_length liable vdj_nt vdj_aa v_mutation v_mutation_aa d_mutation d_mutation_aa j_mutation j_mutation_aa v_penalty d_penalty j_penalty PG9 CAGCGATTAGTGGAG... human IGH F T F T F F IGHV3-33*05 IGHV3-33*05 IGHD3-3*01 IGHD3-3*01 IGHJ6*03 IGHJ6*03 CAGCGATTAGTGGAG... GTGCAGCTGGTGGAG... QRLVESGGGVVQPGS... VQLVESGGGVVQPGR... 1 293 328 355 356 408 CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... GTGCAGCTGGTGGAG... VQLVESGGGVVQPGR... TATTACGATTTCTAT... YYDFYDGYY TATTACGATTTTTGG... YYDFWSGYY ACTACCACTATATGG... YHYMDVWGKGTTVTV... ACTACTACTACATGG... YYYMDVWGKGTTVTV... CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... GGATTCGACTTCAGT... GFDFSRQG ATGCACTGGGTCCGC... MHWVRQAPGQGLEWV... ATTAAATATGATGGA... IKYDGSEK TATCATGCTGACTCC... YHADSVWGRLSISRD... TGGGGCAAAGGGACC... WGKGTTVTVSS GTGAGAGAGGCTGGT... VREAGGPDYRNGYNY... TGTGTGAGAGAGGCT... 96 CVREAGGPDYRNGYN... 32 335.2 30.11 83.4 3N293M115S 327S1N28M53S2N 355S9N53M 4.83e-94 9.579e-05 3.428e-20 86 82.1 88.7 1 293 4 296 328 355 2 29 356 408 10 62 1 72 73 96 97 147 148 171 172 285 376 408 286 375 GGCTGGTGGGCCCGA... 34 nan 0 False CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... 14 19.5876 17.875 22.2222 11.3125 5.88235 -1 -1 -2 This .tsv file is a Rearrangement Schema compliant AIRR table . These files have a certain specification, including a .tsv file suffix. Since they are AIRR compliant, they can be used by other AIRR compliant software. . For instance, we could use the output .tsv in any module in the immcantation portal . Other Output Formats \u00b6 While the .tsv AIRR table is the recognized standard for AIRR, you can also output to any other formats that pandas supports . from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) . fillna ( \"\" ) # write airr table to a csv airr_table . to_csv ( \"PG9 AIRR.csv\" ) # write to a json file airr_table . to_json ( \"PG9 AIRR.json\" , orient = \"records\" ) # write to a browser friendly html file airr_table . to_html ( \"PG9 AIRR.html\" ) # write to an excel file airr_table . to_excel ( \"PG9 AIRR.xlsx\" ) # write to a parquet file that is read by spark airr_table . to_parquet ( \"PG9 AIRR.parquet\" ) # write to a feather file that has rapid IO airr_table . to_feather ( \"PG9 AIRR.feather\" ) Attention Because AirrTable is a subclass of pandas.DataFrame , you can use any pandas IO methods to write to a file of your choosing. However, it must be noted that these are not official Rearrangement Schema compliant AIRR tables . They may only be read in by software that reads those file types or be read back in by SADIE and probably will not work in other software that supports the AIRR standard. But, these file formats are extremely useful for much larger files. Reading Files \u00b6 To read in an AIRR file we have to create an AirrTable object. Reading an AIRR.tsv \u00b6 You can read official AIRR.tsv using the AirrTable.from_airr() method or with pandas and casting to an AirrTable object. import pandas as pd from sadie.airr import AirrTable # use AirrTable method to convert AirrTable.tsv to an AirrTable object airr_table = AirrTable . read_airr ( \"PG9 AIRR.tsv.gz\" ) print ( type ( airr_table ), isinstance ( airr_table , AirrTable )) # or use pandas read_csv method airr_table_from_pandas = AirrTable ( pd . read_csv ( \"PG9 AIRR.tsv.gz\" , sep = \" \\t \" )) print ( type ( airr_table_from_pandas ), isinstance ( airr_table_from_pandas , AirrTable )) print ( airr_table_from_pandas == airr_table ) Outputs: <class 'sadie.airr.airrtable.airrtable.AirrTable'> True <class 'sadie.airr.airrtable.airrtable.AirrTable'> True True # The airr tables are equall Reading other file formats \u00b6 Any other file formats that are readable by pandas IO can be read in by passing them to AirrTable. import pandas as pd from sadie.airr import AirrTable # write airr table to a csv airr_table_1 = AirrTable ( pd . read_csv ( \"PG9 AIRR.csv\" )) # write to a json file airr_table_2 = AirrTable ( pd . read_json ( \"PG9 AIRR.json\" , orient = \"records\" )) # write to an excel file airr_table_3 = AirrTable ( pd . read_excel ( \"PG9 AIRR.xlsx\" )) # write to a parquet file that is read by spark airr_table_4 = AirrTable ( pd . read_parquet ( \"PG9 AIRR.parquet\" )) # write to a feather file that has rapid IO airr_table_5 = AirrTable ( pd . read_feather ( \"PG9 AIRR.feather\" )) # ensure they are all equal to each other print ( airr_table_1 == airr_table_2 ) # == airr_table_3 == airr_table_4 == airr_table_5)","title":"Annotating"},{"location":"annotation/#airr-annotation","text":"Annotation is the bedrock of all immunoformatics workflows. It is the process of identifying CDRs/frameworks, levels of somatic mutation, locus use, productive rearragements, and other features that describe the B cell receptor or T cell recptor (BCR/TCR). In the description of a BCR/TCR, how can we use the data file output from one data pipeline can be compared to another? In other words, what if the description of a reperotire has different fields and datatypes that describe a repertoire or even a single BCR/TCR? Fear not! The AIRR community to the rescue ! \" AIRR Data Representations are versioned specifications that consist of a file format and a well-defined schema[...] The schema defines the data model, field names, data types, and encodings for AIRR standard objects. Strict typing enables interoperability and data sharing between different AIRR-seq analysis tools and repositories[...] \" The AIRR Standards 1.3 documentation SADIE leverages the AIRR to provide a standardized data representation for BCRs. You can read all the fields and values in the AIRR Rearrangment shema standard here","title":"AIRR Annotation"},{"location":"annotation/#single-sequence-annotation","text":"# use Airr module # import pandas for dataframe handling import pandas as pd from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) # output object types print ( type ( airr_table )) print ( isinstance ( airr_table , pd . DataFrame )) The output will contain <class 'sadie.airr.airrtable.airrtable.AirrTable'> and shows that the output is an instance of the AirrTable class. Info Running an AIRR method generates an AIRR table object. The AIRR table is a subclass of a pandas dataframe and thus can be used by any pandas method. Pandas is the workhorse of the SADIE library so we highly encourage some rudimentary knowledge of pandas to get maximize SAIDIE functionality.","title":"Single Sequence Annotation"},{"location":"annotation/#writing-files","text":"","title":"Writing Files"},{"location":"annotation/#airr-rearrangment-file","text":"To output an AIRR file, we can use the AirrTable.to_airr() method. # import the SADIE Airr module from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) . fillna ( \"\" ) # write airr table to tsv or tsv.gz/bz airr_table . to_airr ( \"PG9 AIRR.tsv\" ) # compress your airr table into a bzip or gzip filecxx airr_table . to_airr ( \"PG9 AIRR.tsv.gz\" ) airr_table . to_airr ( \"PG9 AIRR.tsv.bz2\" ) The tsv file PG9 AIRR.tsv generated will be a tabular datafile that will resemble the following: sequence_id sequence species locus stop_codon vj_in_frame v_frameshift productive rev_comp complete_vdj v_call_top v_call d_call_top d_call j_call_top j_call sequence_alignment germline_alignment sequence_alignment_aa germline_alignment_aa v_alignment_start v_alignment_end d_alignment_start d_alignment_end j_alignment_start j_alignment_end v_sequence_alignment v_sequence_alignment_aa v_germline_alignment v_germline_alignment_aa d_sequence_alignment d_sequence_alignment_aa d_germline_alignment d_germline_alignment_aa j_sequence_alignment j_sequence_alignment_aa j_germline_alignment j_germline_alignment_aa fwr1 fwr1_aa cdr1 cdr1_aa fwr2 fwr2_aa cdr2 cdr2_aa fwr3 fwr3_aa fwr4 fwr4_aa cdr3 cdr3_aa junction junction_length junction_aa junction_aa_length v_score d_score j_score v_cigar d_cigar j_cigar v_support d_support j_support v_identity d_identity j_identity v_sequence_start v_sequence_end v_germline_start v_germline_end d_sequence_start d_sequence_end d_germline_start d_germline_end j_sequence_start j_sequence_end j_germline_start j_germline_end fwr1_start fwr1_end cdr1_start cdr1_end fwr2_start fwr2_end cdr2_start cdr2_end fwr3_start fwr3_end fwr4_start fwr4_end cdr3_start cdr3_end np1 np1_length np2 np2_length liable vdj_nt vdj_aa v_mutation v_mutation_aa d_mutation d_mutation_aa j_mutation j_mutation_aa v_penalty d_penalty j_penalty PG9 CAGCGATTAGTGGAG... human IGH F T F T F F IGHV3-33*05 IGHV3-33*05 IGHD3-3*01 IGHD3-3*01 IGHJ6*03 IGHJ6*03 CAGCGATTAGTGGAG... GTGCAGCTGGTGGAG... QRLVESGGGVVQPGS... VQLVESGGGVVQPGR... 1 293 328 355 356 408 CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... GTGCAGCTGGTGGAG... VQLVESGGGVVQPGR... TATTACGATTTCTAT... YYDFYDGYY TATTACGATTTTTGG... YYDFWSGYY ACTACCACTATATGG... YHYMDVWGKGTTVTV... ACTACTACTACATGG... YYYMDVWGKGTTVTV... CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... GGATTCGACTTCAGT... GFDFSRQG ATGCACTGGGTCCGC... MHWVRQAPGQGLEWV... ATTAAATATGATGGA... IKYDGSEK TATCATGCTGACTCC... YHADSVWGRLSISRD... TGGGGCAAAGGGACC... WGKGTTVTVSS GTGAGAGAGGCTGGT... VREAGGPDYRNGYNY... TGTGTGAGAGAGGCT... 96 CVREAGGPDYRNGYN... 32 335.2 30.11 83.4 3N293M115S 327S1N28M53S2N 355S9N53M 4.83e-94 9.579e-05 3.428e-20 86 82.1 88.7 1 293 4 296 328 355 2 29 356 408 10 62 1 72 73 96 97 147 148 171 172 285 376 408 286 375 GGCTGGTGGGCCCGA... 34 nan 0 False CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... 14 19.5876 17.875 22.2222 11.3125 5.88235 -1 -1 -2 This .tsv file is a Rearrangement Schema compliant AIRR table . These files have a certain specification, including a .tsv file suffix. Since they are AIRR compliant, they can be used by other AIRR compliant software. . For instance, we could use the output .tsv in any module in the immcantation portal .","title":"AIRR Rearrangment File"},{"location":"annotation/#other-output-formats","text":"While the .tsv AIRR table is the recognized standard for AIRR, you can also output to any other formats that pandas supports . from sadie.airr import Airr # define a single sequence pg9_seq = \"CAGCGATTAGTGGAGTCTGGGGGAGGCGTGGTCCAGCCTGGGTCGTCCCTGAGACTCTCCTGTGCAGCGTCCGGATTCGACTTCAGTAGACAAGGCATGCACTGGGTCCGCCAGGCTCCAGGCCAGGGGCTGGAGTGGGTGGCATTTATTAAATATGATGGAAGTGAGAAATATCATGCTGACTCCGTATGGGGCCGACTCAGCATCTCCAGAGACAATTCCAAGGATACGCTTTATCTCCAAATGAATAGCCTGAGAGTCGAGGACACGGCTACATATTTTTGTGTGAGAGAGGCTGGTGGGCCCGACTACCGTAATGGGTACAACTATTACGATTTCTATGATGGTTATTATAACTACCACTATATGGACGTCTGGGGCAAAGGGACCACGGTCACCGTCTCGAGC\" # setup API object airr_api = Airr ( \"human\" ) # run sequence and return airr table with sequence_id and sequence airr_table = airr_api . run_single ( \"PG9\" , pg9_seq ) . fillna ( \"\" ) # write airr table to a csv airr_table . to_csv ( \"PG9 AIRR.csv\" ) # write to a json file airr_table . to_json ( \"PG9 AIRR.json\" , orient = \"records\" ) # write to a browser friendly html file airr_table . to_html ( \"PG9 AIRR.html\" ) # write to an excel file airr_table . to_excel ( \"PG9 AIRR.xlsx\" ) # write to a parquet file that is read by spark airr_table . to_parquet ( \"PG9 AIRR.parquet\" ) # write to a feather file that has rapid IO airr_table . to_feather ( \"PG9 AIRR.feather\" ) Attention Because AirrTable is a subclass of pandas.DataFrame , you can use any pandas IO methods to write to a file of your choosing. However, it must be noted that these are not official Rearrangement Schema compliant AIRR tables . They may only be read in by software that reads those file types or be read back in by SADIE and probably will not work in other software that supports the AIRR standard. But, these file formats are extremely useful for much larger files.","title":"Other Output Formats"},{"location":"annotation/#reading-files","text":"To read in an AIRR file we have to create an AirrTable object.","title":"Reading Files"},{"location":"annotation/#reading-an-airrtsv","text":"You can read official AIRR.tsv using the AirrTable.from_airr() method or with pandas and casting to an AirrTable object. import pandas as pd from sadie.airr import AirrTable # use AirrTable method to convert AirrTable.tsv to an AirrTable object airr_table = AirrTable . read_airr ( \"PG9 AIRR.tsv.gz\" ) print ( type ( airr_table ), isinstance ( airr_table , AirrTable )) # or use pandas read_csv method airr_table_from_pandas = AirrTable ( pd . read_csv ( \"PG9 AIRR.tsv.gz\" , sep = \" \\t \" )) print ( type ( airr_table_from_pandas ), isinstance ( airr_table_from_pandas , AirrTable )) print ( airr_table_from_pandas == airr_table ) Outputs: <class 'sadie.airr.airrtable.airrtable.AirrTable'> True <class 'sadie.airr.airrtable.airrtable.AirrTable'> True True # The airr tables are equall","title":"Reading an AIRR.tsv"},{"location":"annotation/#reading-other-file-formats","text":"Any other file formats that are readable by pandas IO can be read in by passing them to AirrTable. import pandas as pd from sadie.airr import AirrTable # write airr table to a csv airr_table_1 = AirrTable ( pd . read_csv ( \"PG9 AIRR.csv\" )) # write to a json file airr_table_2 = AirrTable ( pd . read_json ( \"PG9 AIRR.json\" , orient = \"records\" )) # write to an excel file airr_table_3 = AirrTable ( pd . read_excel ( \"PG9 AIRR.xlsx\" )) # write to a parquet file that is read by spark airr_table_4 = AirrTable ( pd . read_parquet ( \"PG9 AIRR.parquet\" )) # write to a feather file that has rapid IO airr_table_5 = AirrTable ( pd . read_feather ( \"PG9 AIRR.feather\" )) # ensure they are all equal to each other print ( airr_table_1 == airr_table_2 ) # == airr_table_3 == airr_table_4 == airr_table_5)","title":"Reading other file formats"},{"location":"clustering/","text":"","title":"Clustering"},{"location":"contribute/","text":"Please contribute to SADIE ! Warning SADIE does not support he M1/M2 Mac chip set architecture. SADIE uses pyhmmer , an amazing library for Cython bindings to the sequence aligner HMMER3 . Due to HMMER3 not supporting the M1/M2 chip sets, SADIE does not support them either. HMMER3 will support it with it's next merge from their develop branch. When that happens we will update SADIE to support it as well. Issues \u00b6 Questions, feature requests and bug reports are all welcome as discussions or issues . However, to report a security vulnerability, please see our security policy . To make it as simple as possible for us to help you, please include the version output in your issue: sadie --version Please try to always include the above unless you're unable to install SADIE or know it's not relevant to your question or feature request. Pull Requests \u00b6 SADIE has an automated release. This means that if you submit a pull request, it will be released as soon as it is accepted. This is to ensure that the latest version of SADIE is always available to the community. You'll need to have a version between Python 3.8 and 3.10 , poetry , and git installed. Clone your fork from Github and cd into your repo directory $ git clone git@github.com:YOUR_USERNAME/sadie.git $ cd sadie Set up a poetry for running tests $ pip install poetry ---> 100% Info Currently poetry does not support python 3.11 Install sadie, dependencies, test dependencies and doc dependencies $ poetry install --with dev ---> 100% Checkout a new branch and make your changes $ git checkout -b my-new-feature-branch Fix formatting and imports $ pre-commit run --all-files Info SADIE uses black to enforce formatting, isort to fix imports, and pyright for type checking. Run tests and linting $ poetry run pytest tests Build documentation $ mkdocs build $ mkdocs serve INFO - Building documentation... INFO - [14:27:11] Serving on http://127.0.0.1:8000/ Info Our netlify.toml is used to create our documentation site. This is not needed for a pull request, but is useful for checking your changes locally. Commit your changes and submit a pull request to the development branch ... add, commit, push, and create your pull request point to our development branch. Thank you in advance!","title":"Contributing to SADIE"},{"location":"contribute/#issues","text":"Questions, feature requests and bug reports are all welcome as discussions or issues . However, to report a security vulnerability, please see our security policy . To make it as simple as possible for us to help you, please include the version output in your issue: sadie --version Please try to always include the above unless you're unable to install SADIE or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contribute/#pull-requests","text":"SADIE has an automated release. This means that if you submit a pull request, it will be released as soon as it is accepted. This is to ensure that the latest version of SADIE is always available to the community. You'll need to have a version between Python 3.8 and 3.10 , poetry , and git installed. Clone your fork from Github and cd into your repo directory $ git clone git@github.com:YOUR_USERNAME/sadie.git $ cd sadie Set up a poetry for running tests $ pip install poetry ---> 100% Info Currently poetry does not support python 3.11 Install sadie, dependencies, test dependencies and doc dependencies $ poetry install --with dev ---> 100% Checkout a new branch and make your changes $ git checkout -b my-new-feature-branch Fix formatting and imports $ pre-commit run --all-files Info SADIE uses black to enforce formatting, isort to fix imports, and pyright for type checking. Run tests and linting $ poetry run pytest tests Build documentation $ mkdocs build $ mkdocs serve INFO - Building documentation... INFO - [14:27:11] Serving on http://127.0.0.1:8000/ Info Our netlify.toml is used to create our documentation site. This is not needed for a pull request, but is useful for checking your changes locally. Commit your changes and submit a pull request to the development branch ... add, commit, push, and create your pull request point to our development branch. Thank you in advance!","title":"Pull Requests"},{"location":"models/","text":"","title":"BCR/TCR Objects"},{"location":"numbering/","text":"","title":"Sequence Numbering"},{"location":"reference/","text":"Reference Module \u00b6 The SADIE reference module abstracts the underlying reference data used by the AIRR and Numbering module. Both of these modules use external database files. Their organization (particularly by AIRR which ports IGBlast ) can be extremely complicated. Making new reference database is a tedious and time consuming task. This module provides a simple interface for making your own reference databases. Builtin reference SADIE ships with a reference database that contains the most common species along with functional genes. The average user will not need to use this module as the the database is comprehensive. You can see each entry by looking either directly at the paths used src/sadie/airr/data/ for AIRR and src/sadie/anarci/data for the renumbering module. Another convienitent way to look at the reference database is to view the reference.yml . More on how that file is structured will be provided . Germline Gene Gateway \u00b6 New germline gene segments are being discovered at a rapid pace. To meet the needs of this changing landscape, SADIE gets all of the gemrline gene info from a programmatic API called the Germline Gene Gateway . This API is hosted as free service. It consists of gemrline genes from IMGT as well as custom genes that have been annotated and cataloged by programs such as IGDiscover . To explore the API, go to the Germline Gene Gateway . This API is RESTful and conforms to the OpenAPI 3.0 specification. Examples of how to use the G3 API \u00b6 The following examples shows how to pull genes programmatically usinng the command line utilities curl , wget and the requests library in python. It will fetch the first 5 V-Gene segments in IMGT notation. curl wget Python $ curl -X 'GET' 'https://g3.jordanrwillis.com/api/v1/genes?source=imgt&segment=V&common=human&limit=5' -H 'accept: application/json' -o 'human_v.json' $ wget 'https://g3.jordanrwillis.com/api/v1/genes?source=imgt&segment=V&common=human&limit=5' -O human_v.json import json import requests from sadie.reference import G3Error url = \"https://g3.jordanrwillis.com/api/v1/genes?source=imgt&segment=V&common=human&limit=5\" response = requests . get ( url ) response_json = response . json () if response . status_code != 200 : raise G3Error ( \"Error: \" + str ( response . status_code )) print ( json . dumps ( response_json , indent = 4 )) json . dump ( response_json , open ( \"human_v.json\" , \"w\" ), indent = 4 ) The output will be a JSON file containing the V-Gene segment and all relevant information needed by SADIE to write out databases needed by the AIRR and Numbering modules. human_v.json [ { \"_id\" : \"608b90908e6710a05b587046\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*01\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDTAVYYCAR\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTATGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDTAVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b587048\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*02\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDTA\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTATGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDTA\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 275 , \"cdr3\" : \"\" , \"cdr3_aa\" : \"\" , \"cdr3_start\" : null , \"cdr3_end\" : null , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b587049\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*03\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDMAVYYCAR\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTATGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDMAVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b58704b\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*04\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTACGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTACGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTACGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDTAVYYCAR\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTACGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDTAVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b587053\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-2*01\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGATACACCTTCACCGGCTACTATATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGGATCAACCCTAACAGTGGTGGCACAAACTATGCACAGAAGTTTCAGGGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGATACACCTTCACCGGCTACTATATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGGATCAACCCTAACAGTGGTGGCACAAACTATGCACAGAAGTTTCAGGGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGATACACCTTC............ACCGGCTACTATATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGGATCAACCCTAAC......AGTGGTGGCACAAACTATGCACAGAAGTTTCAG...GGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TGYYMHWVRQAPGQGLEWMGRINPN..SGGTNYAQKFQ.GRVTSTRDTSISTAYMELSRLRSDDTVVYYCAR\" , \"fwr1\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGATACACCTTCACCGGCTACTAT\" , \"cdr1_aa\" : \"GYTFTGYY\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGG\" , \"fwr2_aa\" : \"MHWVRQAPGQGLEWMGR\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAACCCTAACAGTGGTGGCACA\" , \"cdr2_aa\" : \"INPNSGGT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGTTTCAGGGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKFQGRVTSTRDTSISTAYMELSRLRSDDTVVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } } ] G3 API The G3 API can be explored live through the documentation. To do so, go to the G3 API Documentation . It is a clean non-redudant dataset that can be used for any project programatically. To learn more, explore the source code . SADIE abstracts most of the connections with G3 so you should not have to interact with the API directly. Generating AIRR Reference Database \u00b6 Command Line Usage Python $ sadie reference make -o my_output_database_path -d reference.yml $ from sadie.reference import Reference reference_path = \"reference.yml\" reference_object = Reference . parse_yaml ( reference_path ) outpath = \"my_output_database_path\" germline_path = reference_object . make_airr_database ( outpath ) The reference YAML \u00b6 The reference YAML file is a simple YAML file that takes the following structure. database : species : sub-species : -gene1 -gene2 sub-species2 : -gene3 -gene4 Field Description Example database The database that the gene comes from IMGT or custom species The name of the species that will be used in the annotation table human , mouse sub-species A gene from another species that maybe knocked-in the species human gene The full gene name IGHV3-23*01 Why are is there a sub-species? Most of the time the sub-species and species will be the same thing. i.e. imgt : human : human : -IGHV3-23*01 -IGHD3-3*01 -IGHJ6*01 However, sometimes you maybe working with chimeric models where a transgene is knocked into a model species. Consider the HuGL mouse models from Deli et al. (2020) imgt : hugl18 : human : - IGHV4-59*01 - IGHD3-3*01 - IGHJ3*02 mouse : - IGHV1-11*01 - IGHV1-12*01 - IGHV1-13*01 - IGHV1-14*01 ... The HuGL18 model will have the full mouse background and three gene segments knocked-in from a human. Again, a full list of databases, species and genes can be found by exploring the G3 API , click the Try it out button. Generating AIRR database with Reference Class \u00b6 Rather than generate a pre-configured database, SADIE can also generate a reference file on the fly. This is useful for procedural analsysis where you are generating cusom genes for multiple species. import tempfile from sadie.reference import Reference # create empty reference object ref_class = Reference () with tempfile . TemporaryDirectory () as tmpdirectory : # Add genes one at a time ref_class . add_gene ({ \"species\" : \"human\" , \"gene\" : \"IGHV1-69*01\" , \"database\" : \"imgt\" }) ref_class . add_gene ({ \"species\" : \"human\" , \"gene\" : \"IGHD3-3*01\" , \"database\" : \"imgt\" }) ref_class . add_gene ({ \"species\" : \"human\" , \"gene\" : \"IGHJ6*01\" , \"database\" : \"imgt\" }) # call make_airr database on a path ref_class . make_airr_database ( tmpdirectory ) # use tempdirectory using AIRR module # ... or we can use the YAML file as a template to add more genes import tempfile from sadie.reference import Reference from sadie.reference.yaml import YamlRef # enter no file to use reference.yml yml_ref = YamlRef () # create empty reference object ref_class = Reference () # Iterate through YamlRef for entry in yml_ref : # these are dictionary entries db = entry [ \"database\" ] species = entry [ \"species\" ] sub_species = entry [ \"sub_species\" ] # gene is a list of genes genes = entry [ \"gene\" ] # only keep custom if db == \"custom\" and species == \"cat\" : # only want cat and custom only_vs = list ( filter ( lambda x : x [ 3 ] == \"V\" , genes )) # only get v genes, lookup third letter for this for gene in only_vs [: 5 ]: # only getting first 5 ref_class . add_gene ({ \"gene\" : gene , \"species\" : species , \"sub_species\" : sub_species , \"database\" : db }) # now add J6 to make a cat/dog. Can't mix and match database types! ref_class . add_gene ({ \"gene\" : \"IGHJ6*01\" , \"species\" : \"dog\" , \"sub_species\" : \"dog\" , \"database\" : \"custom\" }) with tempfile . TemporaryDirectory () as named_temp : ref_class . make_airr_database ( named_temp ) Warning You can't mix and match databases. A custom and IMGT can't be mixed. Copyright \u00a9 Jordan R. Willis and Troy Sincomb","title":"Reference Database"},{"location":"reference/#reference-module","text":"The SADIE reference module abstracts the underlying reference data used by the AIRR and Numbering module. Both of these modules use external database files. Their organization (particularly by AIRR which ports IGBlast ) can be extremely complicated. Making new reference database is a tedious and time consuming task. This module provides a simple interface for making your own reference databases. Builtin reference SADIE ships with a reference database that contains the most common species along with functional genes. The average user will not need to use this module as the the database is comprehensive. You can see each entry by looking either directly at the paths used src/sadie/airr/data/ for AIRR and src/sadie/anarci/data for the renumbering module. Another convienitent way to look at the reference database is to view the reference.yml . More on how that file is structured will be provided .","title":"Reference Module"},{"location":"reference/#germline-gene-gateway","text":"New germline gene segments are being discovered at a rapid pace. To meet the needs of this changing landscape, SADIE gets all of the gemrline gene info from a programmatic API called the Germline Gene Gateway . This API is hosted as free service. It consists of gemrline genes from IMGT as well as custom genes that have been annotated and cataloged by programs such as IGDiscover . To explore the API, go to the Germline Gene Gateway . This API is RESTful and conforms to the OpenAPI 3.0 specification.","title":"Germline Gene Gateway"},{"location":"reference/#examples-of-how-to-use-the-g3-api","text":"The following examples shows how to pull genes programmatically usinng the command line utilities curl , wget and the requests library in python. It will fetch the first 5 V-Gene segments in IMGT notation. curl wget Python $ curl -X 'GET' 'https://g3.jordanrwillis.com/api/v1/genes?source=imgt&segment=V&common=human&limit=5' -H 'accept: application/json' -o 'human_v.json' $ wget 'https://g3.jordanrwillis.com/api/v1/genes?source=imgt&segment=V&common=human&limit=5' -O human_v.json import json import requests from sadie.reference import G3Error url = \"https://g3.jordanrwillis.com/api/v1/genes?source=imgt&segment=V&common=human&limit=5\" response = requests . get ( url ) response_json = response . json () if response . status_code != 200 : raise G3Error ( \"Error: \" + str ( response . status_code )) print ( json . dumps ( response_json , indent = 4 )) json . dump ( response_json , open ( \"human_v.json\" , \"w\" ), indent = 4 ) The output will be a JSON file containing the V-Gene segment and all relevant information needed by SADIE to write out databases needed by the AIRR and Numbering modules. human_v.json [ { \"_id\" : \"608b90908e6710a05b587046\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*01\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDTAVYYCAR\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTATGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDTAVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b587048\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*02\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDTA\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTATGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTAAGATCTGACGACACGGCC\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDTA\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 275 , \"cdr3\" : \"\" , \"cdr3_aa\" : \"\" , \"cdr3_start\" : null , \"cdr3_end\" : null , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b587049\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*03\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTATGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDMAVYYCAR\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTATGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACATGGCCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDMAVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b58704b\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-18*04\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTACGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTTACCAGCTACGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTACAATGGTAACACAAACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGTTACACCTTT............ACCAGCTACGGTATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGGATCAGCGCTTAC......AATGGTAACACAAACTATGCACAGAAGCTCCAG...GGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TSYGISWVRQAPGQGLEWMGWISAY..NGNTNYAQKLQ.GRVTMTTDTSTSTAYMELRSLRSDDTAVYYCAR\" , \"fwr1\" : \"CAGGTTCAGCTGGTGCAGTCTGGAGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGTTACACCTTTACCAGCTACGGT\" , \"cdr1_aa\" : \"GYTFTSYG\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATCAGCTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGATGG\" , \"fwr2_aa\" : \"ISWVRQAPGQGLEWMGW\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAGCGCTTACAATGGTAACACA\" , \"cdr2_aa\" : \"ISAYNGNT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGCTCCAGGGCAGAGTCACCATGACCACAGACACATCCACGAGCACAGCCTACATGGAGCTGAGGAGCCTGAGATCTGACGACACGGCCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKLQGRVTMTTDTSTSTAYMELRSLRSDDTAVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } }, { \"_id\" : \"608b90908e6710a05b587053\" , \"source\" : \"imgt\" , \"common\" : \"human\" , \"gene\" : \"IGHV1-2*01\" , \"label\" : \"V-REGION\" , \"gene_segment\" : \"V\" , \"receptor\" : \"IG\" , \"sequence\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGATACACCTTCACCGGCTACTATATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGGATCAACCCTAACAGTGGTGGCACAAACTATGCACAGAAGTTTCAGGGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGTGCGAGAGA\" , \"latin\" : \"Homo_sapiens\" , \"imgt\" : { \"sequence\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGATACACCTTCACCGGCTACTATATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGGATCAACCCTAACAGTGGTGGCACAAACTATGCACAGAAGTTTCAGGGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCT...GAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCTGGATACACCTTC............ACCGGCTACTATATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGGATCAACCCTAAC......AGTGGTGGCACAAACTATGCACAGAAGTTTCAG...GGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGTGCGAGAGA\" , \"sequence_gapped_aa\" : \"QVQLVQSGA.EVKKPGASVKVSCKASGYTF....TGYYMHWVRQAPGQGLEWMGRINPN..SGGTNYAQKFQ.GRVTSTRDTSISTAYMELSRLRSDDTVVYYCAR\" , \"fwr1\" : \"CAGGTGCAGCTGGTGCAGTCTGGGGCTGAGGTGAAGAAGCCTGGGGCCTCAGTGAAGGTCTCCTGCAAGGCTTCT\" , \"fwr1_aa\" : \"QVQLVQSGAEVKKPGASVKVSCKAS\" , \"fwr1_start\" : 0 , \"fwr1_end\" : 74 , \"cdr1\" : \"GGATACACCTTCACCGGCTACTAT\" , \"cdr1_aa\" : \"GYTFTGYY\" , \"cdr1_start\" : 75 , \"cdr1_end\" : 98 , \"fwr2\" : \"ATGCACTGGGTGCGACAGGCCCCTGGACAAGGGCTTGAGTGGATGGGACGG\" , \"fwr2_aa\" : \"MHWVRQAPGQGLEWMGR\" , \"fwr2_start\" : 99 , \"fwr2_end\" : 149 , \"cdr2\" : \"ATCAACCCTAACAGTGGTGGCACA\" , \"cdr2_aa\" : \"INPNSGGT\" , \"cdr2_start\" : 150 , \"cdr2_end\" : 173 , \"fwr3\" : \"AACTATGCACAGAAGTTTCAGGGCAGGGTCACCAGTACCAGGGACACGTCCATCAGCACAGCCTACATGGAGCTGAGCAGGCTGAGATCTGACGACACGGTCGTGTATTACTGT\" , \"fwr3_aa\" : \"NYAQKFQGRVTSTRDTSISTAYMELSRLRSDDTVVYYC\" , \"fwr3_start\" : 174 , \"fwr3_end\" : 287 , \"cdr3\" : \"GCGAGAGA\" , \"cdr3_aa\" : \"AR\" , \"cdr3_start\" : 288 , \"cdr3_end\" : 295 , \"imgt_functional\" : \"F\" , \"contrived_functional\" : \"F\" } } ] G3 API The G3 API can be explored live through the documentation. To do so, go to the G3 API Documentation . It is a clean non-redudant dataset that can be used for any project programatically. To learn more, explore the source code . SADIE abstracts most of the connections with G3 so you should not have to interact with the API directly.","title":"Examples of how to use the G3 API"},{"location":"reference/#generating-airr-reference-database","text":"Command Line Usage Python $ sadie reference make -o my_output_database_path -d reference.yml $ from sadie.reference import Reference reference_path = \"reference.yml\" reference_object = Reference . parse_yaml ( reference_path ) outpath = \"my_output_database_path\" germline_path = reference_object . make_airr_database ( outpath )","title":"Generating AIRR Reference Database"},{"location":"reference/#the-reference-yaml","text":"The reference YAML file is a simple YAML file that takes the following structure. database : species : sub-species : -gene1 -gene2 sub-species2 : -gene3 -gene4 Field Description Example database The database that the gene comes from IMGT or custom species The name of the species that will be used in the annotation table human , mouse sub-species A gene from another species that maybe knocked-in the species human gene The full gene name IGHV3-23*01 Why are is there a sub-species? Most of the time the sub-species and species will be the same thing. i.e. imgt : human : human : -IGHV3-23*01 -IGHD3-3*01 -IGHJ6*01 However, sometimes you maybe working with chimeric models where a transgene is knocked into a model species. Consider the HuGL mouse models from Deli et al. (2020) imgt : hugl18 : human : - IGHV4-59*01 - IGHD3-3*01 - IGHJ3*02 mouse : - IGHV1-11*01 - IGHV1-12*01 - IGHV1-13*01 - IGHV1-14*01 ... The HuGL18 model will have the full mouse background and three gene segments knocked-in from a human. Again, a full list of databases, species and genes can be found by exploring the G3 API , click the Try it out button.","title":"The reference YAML"},{"location":"reference/#generating-airr-database-with-reference-class","text":"Rather than generate a pre-configured database, SADIE can also generate a reference file on the fly. This is useful for procedural analsysis where you are generating cusom genes for multiple species. import tempfile from sadie.reference import Reference # create empty reference object ref_class = Reference () with tempfile . TemporaryDirectory () as tmpdirectory : # Add genes one at a time ref_class . add_gene ({ \"species\" : \"human\" , \"gene\" : \"IGHV1-69*01\" , \"database\" : \"imgt\" }) ref_class . add_gene ({ \"species\" : \"human\" , \"gene\" : \"IGHD3-3*01\" , \"database\" : \"imgt\" }) ref_class . add_gene ({ \"species\" : \"human\" , \"gene\" : \"IGHJ6*01\" , \"database\" : \"imgt\" }) # call make_airr database on a path ref_class . make_airr_database ( tmpdirectory ) # use tempdirectory using AIRR module # ... or we can use the YAML file as a template to add more genes import tempfile from sadie.reference import Reference from sadie.reference.yaml import YamlRef # enter no file to use reference.yml yml_ref = YamlRef () # create empty reference object ref_class = Reference () # Iterate through YamlRef for entry in yml_ref : # these are dictionary entries db = entry [ \"database\" ] species = entry [ \"species\" ] sub_species = entry [ \"sub_species\" ] # gene is a list of genes genes = entry [ \"gene\" ] # only keep custom if db == \"custom\" and species == \"cat\" : # only want cat and custom only_vs = list ( filter ( lambda x : x [ 3 ] == \"V\" , genes )) # only get v genes, lookup third letter for this for gene in only_vs [: 5 ]: # only getting first 5 ref_class . add_gene ({ \"gene\" : gene , \"species\" : species , \"sub_species\" : sub_species , \"database\" : db }) # now add J6 to make a cat/dog. Can't mix and match database types! ref_class . add_gene ({ \"gene\" : \"IGHJ6*01\" , \"species\" : \"dog\" , \"sub_species\" : \"dog\" , \"database\" : \"custom\" }) with tempfile . TemporaryDirectory () as named_temp : ref_class . make_airr_database ( named_temp ) Warning You can't mix and match databases. A custom and IMGT can't be mixed. Copyright \u00a9 Jordan R. Willis and Troy Sincomb","title":"Generating AIRR database with Reference Class"},{"location":"docs_output/annotation/tutorial001/","text":"sequence_id sequence species locus stop_codon vj_in_frame v_frameshift productive rev_comp complete_vdj v_call_top v_call d_call_top d_call j_call_top j_call sequence_alignment germline_alignment sequence_alignment_aa germline_alignment_aa v_alignment_start v_alignment_end d_alignment_start d_alignment_end j_alignment_start j_alignment_end v_sequence_alignment v_sequence_alignment_aa v_germline_alignment v_germline_alignment_aa d_sequence_alignment d_sequence_alignment_aa d_germline_alignment d_germline_alignment_aa j_sequence_alignment j_sequence_alignment_aa j_germline_alignment j_germline_alignment_aa fwr1 fwr1_aa cdr1 cdr1_aa fwr2 fwr2_aa cdr2 cdr2_aa fwr3 fwr3_aa fwr4 fwr4_aa cdr3 cdr3_aa junction junction_length junction_aa junction_aa_length v_score d_score j_score v_cigar d_cigar j_cigar v_support d_support j_support v_identity d_identity j_identity v_sequence_start v_sequence_end v_germline_start v_germline_end d_sequence_start d_sequence_end d_germline_start d_germline_end j_sequence_start j_sequence_end j_germline_start j_germline_end fwr1_start fwr1_end cdr1_start cdr1_end fwr2_start fwr2_end cdr2_start cdr2_end fwr3_start fwr3_end fwr4_start fwr4_end cdr3_start cdr3_end np1 np1_length np2 np2_length liable vdj_nt vdj_aa v_mutation v_mutation_aa d_mutation d_mutation_aa j_mutation j_mutation_aa v_penalty d_penalty j_penalty PG9 CAGCGATTAGTGGAG... human IGH F T F T F F IGHV3-33*05 IGHV3-33*05 IGHD3-3*01 IGHD3-3*01 IGHJ6*03 IGHJ6*03 CAGCGATTAGTGGAG... GTGCAGCTGGTGGAG... QRLVESGGGVVQPGS... VQLVESGGGVVQPGR... 1 293 328 355 356 408 CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... GTGCAGCTGGTGGAG... VQLVESGGGVVQPGR... TATTACGATTTCTAT... YYDFYDGYY TATTACGATTTTTGG... YYDFWSGYY ACTACCACTATATGG... YHYMDVWGKGTTVTV... ACTACTACTACATGG... YYYMDVWGKGTTVTV... CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... GGATTCGACTTCAGT... GFDFSRQG ATGCACTGGGTCCGC... MHWVRQAPGQGLEWV... ATTAAATATGATGGA... IKYDGSEK TATCATGCTGACTCC... YHADSVWGRLSISRD... TGGGGCAAAGGGACC... WGKGTTVTVSS GTGAGAGAGGCTGGT... VREAGGPDYRNGYNY... TGTGTGAGAGAGGCT... 96 CVREAGGPDYRNGYN... 32 335.2 30.11 83.4 3N293M115S 327S1N28M53S2N 355S9N53M 4.83e-94 9.579e-05 3.428e-20 86 82.1 88.7 1 293 4 296 328 355 2 29 356 408 10 62 1 72 73 96 97 147 148 171 172 285 376 408 286 375 GGCTGGTGGGCCCGA... 34 nan 0 False CAGCGATTAGTGGAG... QRLVESGGGVVQPGS... 14 19.5876 17.875 22.2222 11.3125 5.88235 -1 -1 -2","title":"Tutorial001"}]}