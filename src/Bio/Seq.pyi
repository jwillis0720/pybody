"""
This type stub file was generated by pyright.
"""

import abc
from abc import ABC, abstractmethod
from typing import Any

ambiguous_rna_complement: Any

class SequenceDataAbstractBaseClass(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    @abstractmethod
    def __len__(self): ...
    @abstractmethod
    def __getitem__(self, key): ...
    def __bytes__(self): ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __contains__(self, item): ...
    def decode(self, encoding: str = ...): ...
    def count(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def find(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def rfind(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def index(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def rindex(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def startswith(self, prefix, start: Any | None = ..., end: Any | None = ...): ...
    def endswith(self, suffix, start: Any | None = ..., end: Any | None = ...): ...
    def split(self, sep: Any | None = ..., maxsplit: int = ...): ...
    def rsplit(self, sep: Any | None = ..., maxsplit: int = ...): ...
    def strip(self, chars: Any | None = ...): ...
    def lstrip(self, chars: Any | None = ...): ...
    def rstrip(self, chars: Any | None = ...): ...
    def upper(self): ...
    def lower(self): ...
    def replace(self, old, new): ...
    def translate(self, table, delete: bytes = ...): ...

class _SeqAbstractBaseClass(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self) -> None: ...
    def __bytes__(self): ...
    def __eq__(self, other) -> bool: ...
    def __lt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __len__(self): ...
    def __getitem__(self, index): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __imul__(self, other): ...
    def count(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def count_overlap(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def __contains__(self, item): ...
    def find(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def rfind(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def index(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def rindex(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def startswith(self, prefix, start: Any | None = ..., end: Any | None = ...): ...
    def endswith(self, suffix, start: Any | None = ..., end: Any | None = ...): ...
    def split(self, sep: Any | None = ..., maxsplit: int = ...): ...
    def rsplit(self, sep: Any | None = ..., maxsplit: int = ...): ...
    def strip(self, chars: Any | None = ..., inplace: bool = ...): ...
    def lstrip(self, chars: Any | None = ..., inplace: bool = ...): ...
    def rstrip(self, chars: Any | None = ..., inplace: bool = ...): ...
    def upper(self, inplace: bool = ...): ...
    def lower(self, inplace: bool = ...): ...
    def translate(
        self, table: str = ..., stop_symbol: str = ..., to_stop: bool = ..., cds: bool = ..., gap: str = ...
    ): ...
    def complement_rna(self, inplace: bool = ...): ...
    def reverse_complement_rna(self, inplace: bool = ...): ...
    def transcribe(self, inplace: bool = ...): ...
    def back_transcribe(self, inplace: bool = ...): ...
    def join(self, other): ...
    def replace(self, old, new, inplace: bool = ...): ...

class Seq(_SeqAbstractBaseClass):
    def __init__(self, data, length: Any | None = ...) -> None: ...
    def __hash__(self) -> int: ...
    def tomutable(self): ...
    def encode(self, encoding: str = ..., errors: str = ...): ...
    def complement(self): ...
    def reverse_complement(self): ...
    def ungap(self, gap: str = ...): ...

class UnknownSeq(Seq):
    def __init__(self, length, alphabet: Any | None = ..., character: str = ...) -> None: ...
    def __len__(self): ...
    def __bytes__(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __imul__(self, other): ...
    def __getitem__(self, index): ...
    def count(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def count_overlap(self, sub, start: Any | None = ..., end: Any | None = ...): ...
    def complement(self): ...
    def complement_rna(self): ...
    def reverse_complement(self): ...
    def reverse_complement_rna(self): ...
    def transcribe(self): ...
    def back_transcribe(self): ...
    def upper(self): ...
    def lower(self): ...
    def translate(
        self, table: str = ..., stop_symbol: str = ..., to_stop: bool = ..., cds: bool = ..., gap: str = ...
    ): ...
    def ungap(self, gap: str = ...): ...
    def join(self, other): ...

class MutableSeq(_SeqAbstractBaseClass):
    def __init__(self, data) -> None: ...
    @property
    def data(self): ...
    @data.setter
    def data(self, value) -> None: ...
    def __setitem__(self, index, value) -> None: ...
    def __delitem__(self, index) -> None: ...
    def append(self, c) -> None: ...
    def insert(self, i, c) -> None: ...
    def pop(self, i: int = ...): ...
    def remove(self, item) -> None: ...
    def reverse(self) -> None: ...
    def complement(self) -> None: ...
    def reverse_complement(self) -> None: ...
    def extend(self, other) -> None: ...
    def toseq(self): ...

class UndefinedSequenceError(ValueError): ...

class _UndefinedSequenceData(SequenceDataAbstractBaseClass):
    def __init__(self, length) -> None: ...
    def __getitem__(self, key): ...
    def __len__(self): ...
    def __bytes__(self): ...
    def __add__(self, other): ...

def transcribe(dna): ...
def back_transcribe(rna): ...
def translate(
    sequence, table: str = ..., stop_symbol: str = ..., to_stop: bool = ..., cds: bool = ..., gap: Any | None = ...
): ...
def reverse_complement(sequence): ...
def complement(sequence): ...
def complement_rna(sequence): ...
